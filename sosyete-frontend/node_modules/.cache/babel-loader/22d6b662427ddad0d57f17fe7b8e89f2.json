{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactInputSelection\n */\n'use strict';\n\nvar ReactDOMSelection = require(\"./ReactDOMSelection\");\n\nvar containsNode = require(\"./containsNode\");\n\nvar focusNode = require(\"./focusNode\");\n\nvar getActiveElement = require(\"./getActiveElement\");\n\nfunction isInDocument(node) {\n  return containsNode(document.documentElement, node);\n}\n/**\n * @ReactInputSelection: React input selection module. Based on Selection.js,\n * but modified to be suitable for react and has a couple of bug fixes (doesn't\n * assume buttons have range selections allowed).\n * Input selection module for React.\n */\n\n\nvar ReactInputSelection = {\n  hasSelectionCapabilities: function (elem) {\n    return elem && (elem.nodeName === 'INPUT' && elem.type === 'text' || elem.nodeName === 'TEXTAREA' || elem.contentEditable === 'true');\n  },\n  getSelectionInformation: function () {\n    var focusedElem = getActiveElement();\n    return {\n      focusedElem: focusedElem,\n      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null\n    };\n  },\n\n  /**\n   * @restoreSelection: If any selection information was potentially lost,\n   * restore it. This is useful when performing operations that could remove dom\n   * nodes and place them back in, resulting in focus being lost.\n   */\n  restoreSelection: function (priorSelectionInformation) {\n    var curFocusedElem = getActiveElement();\n    var priorFocusedElem = priorSelectionInformation.focusedElem;\n    var priorSelectionRange = priorSelectionInformation.selectionRange;\n\n    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {\n      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {\n        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);\n      }\n\n      focusNode(priorFocusedElem);\n    }\n  },\n\n  /**\n   * @getSelection: Gets the selection bounds of a focused textarea, input or\n   * contentEditable node.\n   * -@input: Look up selection bounds of this input\n   * -@return {start: selectionStart, end: selectionEnd}\n   */\n  getSelection: function (input) {\n    var selection;\n\n    if ('selectionStart' in input) {\n      // Modern browser with input or textarea.\n      selection = {\n        start: input.selectionStart,\n        end: input.selectionEnd\n      };\n    } else if (document.selection && input.nodeName === 'INPUT') {\n      // IE8 input.\n      var range = document.selection.createRange(); // There can only be one selection per document in IE, so it must\n      // be in our element.\n\n      if (range.parentElement() === input) {\n        selection = {\n          start: -range.moveStart('character', -input.value.length),\n          end: -range.moveEnd('character', -input.value.length)\n        };\n      }\n    } else {\n      // Content editable or old IE textarea.\n      selection = ReactDOMSelection.getOffsets(input);\n    }\n\n    return selection || {\n      start: 0,\n      end: 0\n    };\n  },\n\n  /**\n   * @setSelection: Sets the selection bounds of a textarea or input and focuses\n   * the input.\n   * -@input     Set selection bounds of this input or textarea\n   * -@offsets   Object of same form that is returned from get*\n   */\n  setSelection: function (input, offsets) {\n    var start = offsets.start;\n    var end = offsets.end;\n\n    if (typeof end === 'undefined') {\n      end = start;\n    }\n\n    if ('selectionStart' in input) {\n      input.selectionStart = start;\n      input.selectionEnd = Math.min(end, input.value.length);\n    } else if (document.selection && input.nodeName === 'INPUT') {\n      var range = input.createTextRange();\n      range.collapse(true);\n      range.moveStart('character', start);\n      range.moveEnd('character', end - start);\n      range.select();\n    } else {\n      ReactDOMSelection.setOffsets(input, offsets);\n    }\n  }\n};\nmodule.exports = ReactInputSelection;","map":{"version":3,"names":["ReactDOMSelection","require","containsNode","focusNode","getActiveElement","isInDocument","node","document","documentElement","ReactInputSelection","hasSelectionCapabilities","elem","nodeName","type","contentEditable","getSelectionInformation","focusedElem","selectionRange","getSelection","restoreSelection","priorSelectionInformation","curFocusedElem","priorFocusedElem","priorSelectionRange","setSelection","input","selection","start","selectionStart","end","selectionEnd","range","createRange","parentElement","moveStart","value","length","moveEnd","getOffsets","offsets","Math","min","createTextRange","collapse","select","setOffsets","module","exports"],"sources":["/Users/ozigun1988/Desktop/git/project/sosyete-frontend/node_modules/react-upvote/node_modules/react/lib/ReactInputSelection.js"],"sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactInputSelection\n */\n\n'use strict';\n\nvar ReactDOMSelection = require(\"./ReactDOMSelection\");\n\nvar containsNode = require(\"./containsNode\");\nvar focusNode = require(\"./focusNode\");\nvar getActiveElement = require(\"./getActiveElement\");\n\nfunction isInDocument(node) {\n  return containsNode(document.documentElement, node);\n}\n\n/**\n * @ReactInputSelection: React input selection module. Based on Selection.js,\n * but modified to be suitable for react and has a couple of bug fixes (doesn't\n * assume buttons have range selections allowed).\n * Input selection module for React.\n */\nvar ReactInputSelection = {\n\n  hasSelectionCapabilities: function(elem) {\n    return elem && (\n      ((elem.nodeName === 'INPUT' && elem.type === 'text') ||\n      elem.nodeName === 'TEXTAREA' || elem.contentEditable === 'true')\n    );\n  },\n\n  getSelectionInformation: function() {\n    var focusedElem = getActiveElement();\n    return {\n      focusedElem: focusedElem,\n      selectionRange:\n          ReactInputSelection.hasSelectionCapabilities(focusedElem) ?\n          ReactInputSelection.getSelection(focusedElem) :\n          null\n    };\n  },\n\n  /**\n   * @restoreSelection: If any selection information was potentially lost,\n   * restore it. This is useful when performing operations that could remove dom\n   * nodes and place them back in, resulting in focus being lost.\n   */\n  restoreSelection: function(priorSelectionInformation) {\n    var curFocusedElem = getActiveElement();\n    var priorFocusedElem = priorSelectionInformation.focusedElem;\n    var priorSelectionRange = priorSelectionInformation.selectionRange;\n    if (curFocusedElem !== priorFocusedElem &&\n        isInDocument(priorFocusedElem)) {\n      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {\n        ReactInputSelection.setSelection(\n          priorFocusedElem,\n          priorSelectionRange\n        );\n      }\n      focusNode(priorFocusedElem);\n    }\n  },\n\n  /**\n   * @getSelection: Gets the selection bounds of a focused textarea, input or\n   * contentEditable node.\n   * -@input: Look up selection bounds of this input\n   * -@return {start: selectionStart, end: selectionEnd}\n   */\n  getSelection: function(input) {\n    var selection;\n\n    if ('selectionStart' in input) {\n      // Modern browser with input or textarea.\n      selection = {\n        start: input.selectionStart,\n        end: input.selectionEnd\n      };\n    } else if (document.selection && input.nodeName === 'INPUT') {\n      // IE8 input.\n      var range = document.selection.createRange();\n      // There can only be one selection per document in IE, so it must\n      // be in our element.\n      if (range.parentElement() === input) {\n        selection = {\n          start: -range.moveStart('character', -input.value.length),\n          end: -range.moveEnd('character', -input.value.length)\n        };\n      }\n    } else {\n      // Content editable or old IE textarea.\n      selection = ReactDOMSelection.getOffsets(input);\n    }\n\n    return selection || {start: 0, end: 0};\n  },\n\n  /**\n   * @setSelection: Sets the selection bounds of a textarea or input and focuses\n   * the input.\n   * -@input     Set selection bounds of this input or textarea\n   * -@offsets   Object of same form that is returned from get*\n   */\n  setSelection: function(input, offsets) {\n    var start = offsets.start;\n    var end = offsets.end;\n    if (typeof end === 'undefined') {\n      end = start;\n    }\n\n    if ('selectionStart' in input) {\n      input.selectionStart = start;\n      input.selectionEnd = Math.min(end, input.value.length);\n    } else if (document.selection && input.nodeName === 'INPUT') {\n      var range = input.createTextRange();\n      range.collapse(true);\n      range.moveStart('character', start);\n      range.moveEnd('character', end - start);\n      range.select();\n    } else {\n      ReactDOMSelection.setOffsets(input, offsets);\n    }\n  }\n};\n\nmodule.exports = ReactInputSelection;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}