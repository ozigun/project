{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDefaultPerf\n * @typechecks static-only\n */\n'use strict';\n\nvar DOMProperty = require(\"./DOMProperty\");\n\nvar ReactDefaultPerfAnalysis = require(\"./ReactDefaultPerfAnalysis\");\n\nvar ReactMount = require(\"./ReactMount\");\n\nvar ReactPerf = require(\"./ReactPerf\");\n\nvar performanceNow = require(\"./performanceNow\");\n\nfunction roundFloat(val) {\n  return Math.floor(val * 100) / 100;\n}\n\nfunction addValue(obj, key, val) {\n  obj[key] = (obj[key] || 0) + val;\n}\n\nvar ReactDefaultPerf = {\n  _allMeasurements: [],\n  // last item in the list is the current one\n  _mountStack: [0],\n  _injected: false,\n  start: function () {\n    if (!ReactDefaultPerf._injected) {\n      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);\n    }\n\n    ReactDefaultPerf._allMeasurements.length = 0;\n    ReactPerf.enableMeasure = true;\n  },\n  stop: function () {\n    ReactPerf.enableMeasure = false;\n  },\n  getLastMeasurements: function () {\n    return ReactDefaultPerf._allMeasurements;\n  },\n  printExclusive: function (measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);\n    console.table(summary.map(function (item) {\n      return {\n        'Component class name': item.componentName,\n        'Total inclusive time (ms)': roundFloat(item.inclusive),\n        'Exclusive mount time (ms)': roundFloat(item.exclusive),\n        'Exclusive render time (ms)': roundFloat(item.render),\n        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),\n        'Render time per instance (ms)': roundFloat(item.render / item.count),\n        'Instances': item.count\n      };\n    })); // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct\n    // number.\n  },\n  printInclusive: function (measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);\n    console.table(summary.map(function (item) {\n      return {\n        'Owner > component': item.componentName,\n        'Inclusive time (ms)': roundFloat(item.time),\n        'Instances': item.count\n      };\n    }));\n    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');\n  },\n  getMeasurementsSummaryMap: function (measurements) {\n    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements, true);\n    return summary.map(function (item) {\n      return {\n        'Owner > component': item.componentName,\n        'Wasted time (ms)': item.time,\n        'Instances': item.count\n      };\n    });\n  },\n  printWasted: function (measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));\n    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');\n  },\n  printDOM: function (measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);\n    console.table(summary.map(function (item) {\n      var result = {};\n      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;\n      result['type'] = item.type;\n      result['args'] = JSON.stringify(item.args);\n      return result;\n    }));\n    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');\n  },\n  _recordWrite: function (id, fnName, totalTime, args) {\n    // TODO: totalTime isn't that useful since it doesn't count paints/reflows\n    var writes = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].writes;\n    writes[id] = writes[id] || [];\n    writes[id].push({\n      type: fnName,\n      time: totalTime,\n      args: args\n    });\n  },\n  measure: function (moduleName, fnName, func) {\n    return function () {\n      for (var args = [], $__0 = 0, $__1 = arguments.length; $__0 < $__1; $__0++) args.push(arguments[$__0]);\n\n      var totalTime;\n      var rv;\n      var start;\n\n      if (fnName === '_renderNewRootComponent' || fnName === 'flushBatchedUpdates') {\n        // A \"measurement\" is a set of metrics recorded for each flush. We want\n        // to group the metrics for a given flush together so we can look at the\n        // components that rendered and the DOM operations that actually\n        // happened to determine the amount of \"wasted work\" performed.\n        ReactDefaultPerf._allMeasurements.push({\n          exclusive: {},\n          inclusive: {},\n          render: {},\n          counts: {},\n          writes: {},\n          displayNames: {},\n          totalTime: 0\n        });\n\n        start = performanceNow();\n        rv = func.apply(this, args);\n        ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].totalTime = performanceNow() - start;\n        return rv;\n      } else if (fnName === '_mountImageIntoNode' || moduleName === 'ReactDOMIDOperations') {\n        start = performanceNow();\n        rv = func.apply(this, args);\n        totalTime = performanceNow() - start;\n\n        if (fnName === '_mountImageIntoNode') {\n          var mountID = ReactMount.getID(args[1]);\n\n          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);\n        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {\n          // special format\n          args[0].forEach(function (update) {\n            var writeArgs = {};\n\n            if (update.fromIndex !== null) {\n              writeArgs.fromIndex = update.fromIndex;\n            }\n\n            if (update.toIndex !== null) {\n              writeArgs.toIndex = update.toIndex;\n            }\n\n            if (update.textContent !== null) {\n              writeArgs.textContent = update.textContent;\n            }\n\n            if (update.markupIndex !== null) {\n              writeArgs.markup = args[1][update.markupIndex];\n            }\n\n            ReactDefaultPerf._recordWrite(update.parentID, update.type, totalTime, writeArgs);\n          });\n        } else {\n          // basic format\n          ReactDefaultPerf._recordWrite(args[0], fnName, totalTime, Array.prototype.slice.call(args, 1));\n        }\n\n        return rv;\n      } else if (moduleName === 'ReactCompositeComponent' && ( // TODO: receiveComponent()?\n      fnName === 'mountComponent' || fnName === 'updateComponent' || fnName === '_renderValidatedComponent')) {\n        if (typeof this._currentElement.type === 'string') {\n          return func.apply(this, args);\n        }\n\n        var rootNodeID = fnName === 'mountComponent' ? args[0] : this._rootNodeID;\n        var isRender = fnName === '_renderValidatedComponent';\n        var isMount = fnName === 'mountComponent';\n        var mountStack = ReactDefaultPerf._mountStack;\n        var entry = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1];\n\n        if (isRender) {\n          addValue(entry.counts, rootNodeID, 1);\n        } else if (isMount) {\n          mountStack.push(0);\n        }\n\n        start = performanceNow();\n        rv = func.apply(this, args);\n        totalTime = performanceNow() - start;\n\n        if (isRender) {\n          addValue(entry.render, rootNodeID, totalTime);\n        } else if (isMount) {\n          var subMountTime = mountStack.pop();\n          mountStack[mountStack.length - 1] += totalTime;\n          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);\n          addValue(entry.inclusive, rootNodeID, totalTime);\n        } else {\n          addValue(entry.inclusive, rootNodeID, totalTime);\n        }\n\n        entry.displayNames[rootNodeID] = {\n          current: this.getName(),\n          owner: this._currentElement._owner ? this._currentElement._owner.getName() : '<root>'\n        };\n        return rv;\n      } else {\n        return func.apply(this, args);\n      }\n    };\n  }\n};\nmodule.exports = ReactDefaultPerf;","map":{"version":3,"names":["DOMProperty","require","ReactDefaultPerfAnalysis","ReactMount","ReactPerf","performanceNow","roundFloat","val","Math","floor","addValue","obj","key","ReactDefaultPerf","_allMeasurements","_mountStack","_injected","start","injection","injectMeasure","measure","length","enableMeasure","stop","getLastMeasurements","printExclusive","measurements","summary","getExclusiveSummary","console","table","map","item","componentName","inclusive","exclusive","render","count","printInclusive","getInclusiveSummary","time","log","getTotalTime","toFixed","getMeasurementsSummaryMap","printWasted","printDOM","getDOMSummary","result","ID_ATTRIBUTE_NAME","id","type","JSON","stringify","args","_recordWrite","fnName","totalTime","writes","push","moduleName","func","$__0","$__1","arguments","rv","counts","displayNames","apply","mountID","getID","forEach","update","writeArgs","fromIndex","toIndex","textContent","markupIndex","markup","parentID","Array","prototype","slice","call","_currentElement","rootNodeID","_rootNodeID","isRender","isMount","mountStack","entry","subMountTime","pop","current","getName","owner","_owner","module","exports"],"sources":["/Users/ozigun1988/Desktop/git/project/sosyete-frontend/node_modules/react-upvote/node_modules/react/lib/ReactDefaultPerf.js"],"sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDefaultPerf\n * @typechecks static-only\n */\n\n'use strict';\n\nvar DOMProperty = require(\"./DOMProperty\");\nvar ReactDefaultPerfAnalysis = require(\"./ReactDefaultPerfAnalysis\");\nvar ReactMount = require(\"./ReactMount\");\nvar ReactPerf = require(\"./ReactPerf\");\n\nvar performanceNow = require(\"./performanceNow\");\n\nfunction roundFloat(val) {\n  return Math.floor(val * 100) / 100;\n}\n\nfunction addValue(obj, key, val) {\n  obj[key] = (obj[key] || 0) + val;\n}\n\nvar ReactDefaultPerf = {\n  _allMeasurements: [], // last item in the list is the current one\n  _mountStack: [0],\n  _injected: false,\n\n  start: function() {\n    if (!ReactDefaultPerf._injected) {\n      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);\n    }\n\n    ReactDefaultPerf._allMeasurements.length = 0;\n    ReactPerf.enableMeasure = true;\n  },\n\n  stop: function() {\n    ReactPerf.enableMeasure = false;\n  },\n\n  getLastMeasurements: function() {\n    return ReactDefaultPerf._allMeasurements;\n  },\n\n  printExclusive: function(measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);\n    console.table(summary.map(function(item) {\n      return {\n        'Component class name': item.componentName,\n        'Total inclusive time (ms)': roundFloat(item.inclusive),\n        'Exclusive mount time (ms)': roundFloat(item.exclusive),\n        'Exclusive render time (ms)': roundFloat(item.render),\n        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),\n        'Render time per instance (ms)': roundFloat(item.render / item.count),\n        'Instances': item.count\n      };\n    }));\n    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct\n    // number.\n  },\n\n  printInclusive: function(measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);\n    console.table(summary.map(function(item) {\n      return {\n        'Owner > component': item.componentName,\n        'Inclusive time (ms)': roundFloat(item.time),\n        'Instances': item.count\n      };\n    }));\n    console.log(\n      'Total time:',\n      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'\n    );\n  },\n\n  getMeasurementsSummaryMap: function(measurements) {\n    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(\n      measurements,\n      true\n    );\n    return summary.map(function(item) {\n      return {\n        'Owner > component': item.componentName,\n        'Wasted time (ms)': item.time,\n        'Instances': item.count\n      };\n    });\n  },\n\n  printWasted: function(measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));\n    console.log(\n      'Total time:',\n      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'\n    );\n  },\n\n  printDOM: function(measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);\n    console.table(summary.map(function(item) {\n      var result = {};\n      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;\n      result['type'] = item.type;\n      result['args'] = JSON.stringify(item.args);\n      return result;\n    }));\n    console.log(\n      'Total time:',\n      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'\n    );\n  },\n\n  _recordWrite: function(id, fnName, totalTime, args) {\n    // TODO: totalTime isn't that useful since it doesn't count paints/reflows\n    var writes =\n      ReactDefaultPerf\n        ._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1]\n        .writes;\n    writes[id] = writes[id] || [];\n    writes[id].push({\n      type: fnName,\n      time: totalTime,\n      args: args\n    });\n  },\n\n  measure: function(moduleName, fnName, func) {\n    return function() {for (var args=[],$__0=0,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);\n      var totalTime;\n      var rv;\n      var start;\n\n      if (fnName === '_renderNewRootComponent' ||\n          fnName === 'flushBatchedUpdates') {\n        // A \"measurement\" is a set of metrics recorded for each flush. We want\n        // to group the metrics for a given flush together so we can look at the\n        // components that rendered and the DOM operations that actually\n        // happened to determine the amount of \"wasted work\" performed.\n        ReactDefaultPerf._allMeasurements.push({\n          exclusive: {},\n          inclusive: {},\n          render: {},\n          counts: {},\n          writes: {},\n          displayNames: {},\n          totalTime: 0\n        });\n        start = performanceNow();\n        rv = func.apply(this, args);\n        ReactDefaultPerf._allMeasurements[\n          ReactDefaultPerf._allMeasurements.length - 1\n        ].totalTime = performanceNow() - start;\n        return rv;\n      } else if (fnName === '_mountImageIntoNode' ||\n          moduleName === 'ReactDOMIDOperations') {\n        start = performanceNow();\n        rv = func.apply(this, args);\n        totalTime = performanceNow() - start;\n\n        if (fnName === '_mountImageIntoNode') {\n          var mountID = ReactMount.getID(args[1]);\n          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);\n        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {\n          // special format\n          args[0].forEach(function(update) {\n            var writeArgs = {};\n            if (update.fromIndex !== null) {\n              writeArgs.fromIndex = update.fromIndex;\n            }\n            if (update.toIndex !== null) {\n              writeArgs.toIndex = update.toIndex;\n            }\n            if (update.textContent !== null) {\n              writeArgs.textContent = update.textContent;\n            }\n            if (update.markupIndex !== null) {\n              writeArgs.markup = args[1][update.markupIndex];\n            }\n            ReactDefaultPerf._recordWrite(\n              update.parentID,\n              update.type,\n              totalTime,\n              writeArgs\n            );\n          });\n        } else {\n          // basic format\n          ReactDefaultPerf._recordWrite(\n            args[0],\n            fnName,\n            totalTime,\n            Array.prototype.slice.call(args, 1)\n          );\n        }\n        return rv;\n      } else if (moduleName === 'ReactCompositeComponent' && (\n        (// TODO: receiveComponent()?\n        (fnName === 'mountComponent' ||\n        fnName === 'updateComponent' || fnName === '_renderValidatedComponent')))) {\n\n        if (typeof this._currentElement.type === 'string') {\n          return func.apply(this, args);\n        }\n\n        var rootNodeID = fnName === 'mountComponent' ?\n          args[0] :\n          this._rootNodeID;\n        var isRender = fnName === '_renderValidatedComponent';\n        var isMount = fnName === 'mountComponent';\n\n        var mountStack = ReactDefaultPerf._mountStack;\n        var entry = ReactDefaultPerf._allMeasurements[\n          ReactDefaultPerf._allMeasurements.length - 1\n        ];\n\n        if (isRender) {\n          addValue(entry.counts, rootNodeID, 1);\n        } else if (isMount) {\n          mountStack.push(0);\n        }\n\n        start = performanceNow();\n        rv = func.apply(this, args);\n        totalTime = performanceNow() - start;\n\n        if (isRender) {\n          addValue(entry.render, rootNodeID, totalTime);\n        } else if (isMount) {\n          var subMountTime = mountStack.pop();\n          mountStack[mountStack.length - 1] += totalTime;\n          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);\n          addValue(entry.inclusive, rootNodeID, totalTime);\n        } else {\n          addValue(entry.inclusive, rootNodeID, totalTime);\n        }\n\n        entry.displayNames[rootNodeID] = {\n          current: this.getName(),\n          owner: this._currentElement._owner ?\n            this._currentElement._owner.getName() :\n            '<root>'\n        };\n\n        return rv;\n      } else {\n        return func.apply(this, args);\n      }\n    };\n  }\n};\n\nmodule.exports = ReactDefaultPerf;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}