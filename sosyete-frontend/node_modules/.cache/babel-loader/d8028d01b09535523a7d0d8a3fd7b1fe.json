{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactTestUtils\n */\n'use strict';\n\nvar EventConstants = require(\"./EventConstants\");\n\nvar EventPluginHub = require(\"./EventPluginHub\");\n\nvar EventPropagators = require(\"./EventPropagators\");\n\nvar React = require(\"./React\");\n\nvar ReactElement = require(\"./ReactElement\");\n\nvar ReactEmptyComponent = require(\"./ReactEmptyComponent\");\n\nvar ReactBrowserEventEmitter = require(\"./ReactBrowserEventEmitter\");\n\nvar ReactCompositeComponent = require(\"./ReactCompositeComponent\");\n\nvar ReactInstanceHandles = require(\"./ReactInstanceHandles\");\n\nvar ReactInstanceMap = require(\"./ReactInstanceMap\");\n\nvar ReactMount = require(\"./ReactMount\");\n\nvar ReactUpdates = require(\"./ReactUpdates\");\n\nvar SyntheticEvent = require(\"./SyntheticEvent\");\n\nvar assign = require(\"./Object.assign\");\n\nvar emptyObject = require(\"./emptyObject\");\n\nvar topLevelTypes = EventConstants.topLevelTypes;\n\nfunction Event(suffix) {}\n/**\n * @class ReactTestUtils\n */\n\n/**\n * Todo: Support the entire DOM.scry query syntax. For now, these simple\n * utilities will suffice for testing purposes.\n * @lends ReactTestUtils\n */\n\n\nvar ReactTestUtils = {\n  renderIntoDocument: function (instance) {\n    var div = document.createElement('div'); // None of our tests actually require attaching the container to the\n    // DOM, and doing so creates a mess that we rely on test isolation to\n    // clean up, so we're going to stop honoring the name of this method\n    // (and probably rename it eventually) if no problems arise.\n    // document.documentElement.appendChild(div);\n\n    return React.render(instance, div);\n  },\n  isElement: function (element) {\n    return ReactElement.isValidElement(element);\n  },\n  isElementOfType: function (inst, convenienceConstructor) {\n    return ReactElement.isValidElement(inst) && inst.type === convenienceConstructor;\n  },\n  isDOMComponent: function (inst) {\n    // TODO: Fix this heuristic. It's just here because composites can currently\n    // pretend to be DOM components.\n    return !!(inst && inst.tagName && inst.getDOMNode);\n  },\n  isDOMComponentElement: function (inst) {\n    return !!(inst && ReactElement.isValidElement(inst) && !!inst.tagName);\n  },\n  isCompositeComponent: function (inst) {\n    return typeof inst.render === 'function' && typeof inst.setState === 'function';\n  },\n  isCompositeComponentWithType: function (inst, type) {\n    return !!(ReactTestUtils.isCompositeComponent(inst) && inst.constructor === type);\n  },\n  isCompositeComponentElement: function (inst) {\n    if (!ReactElement.isValidElement(inst)) {\n      return false;\n    } // We check the prototype of the type that will get mounted, not the\n    // instance itself. This is a future proof way of duck typing.\n\n\n    var prototype = inst.type.prototype;\n    return typeof prototype.render === 'function' && typeof prototype.setState === 'function';\n  },\n  isCompositeComponentElementWithType: function (inst, type) {\n    return !!(ReactTestUtils.isCompositeComponentElement(inst) && inst.constructor === type);\n  },\n  getRenderedChildOfCompositeComponent: function (inst) {\n    if (!ReactTestUtils.isCompositeComponent(inst)) {\n      return null;\n    }\n\n    var internalInstance = ReactInstanceMap.get(inst);\n    return internalInstance._renderedComponent.getPublicInstance();\n  },\n  findAllInRenderedTree: function (inst, test) {\n    if (!inst) {\n      return [];\n    }\n\n    var ret = test(inst) ? [inst] : [];\n\n    if (ReactTestUtils.isDOMComponent(inst)) {\n      var internalInstance = ReactInstanceMap.get(inst);\n      var renderedChildren = internalInstance._renderedComponent._renderedChildren;\n      var key;\n\n      for (key in renderedChildren) {\n        if (!renderedChildren.hasOwnProperty(key)) {\n          continue;\n        }\n\n        if (!renderedChildren[key].getPublicInstance) {\n          continue;\n        }\n\n        ret = ret.concat(ReactTestUtils.findAllInRenderedTree(renderedChildren[key].getPublicInstance(), test));\n      }\n    } else if (ReactTestUtils.isCompositeComponent(inst)) {\n      ret = ret.concat(ReactTestUtils.findAllInRenderedTree(ReactTestUtils.getRenderedChildOfCompositeComponent(inst), test));\n    }\n\n    return ret;\n  },\n\n  /**\n   * Finds all instance of components in the rendered tree that are DOM\n   * components with the class name matching `className`.\n   * @return an array of all the matches.\n   */\n  scryRenderedDOMComponentsWithClass: function (root, className) {\n    return ReactTestUtils.findAllInRenderedTree(root, function (inst) {\n      var instClassName = inst.props.className;\n      return ReactTestUtils.isDOMComponent(inst) && instClassName && (' ' + instClassName + ' ').indexOf(' ' + className + ' ') !== -1;\n    });\n  },\n\n  /**\n   * Like scryRenderedDOMComponentsWithClass but expects there to be one result,\n   * and returns that one result, or throws exception if there is any other\n   * number of matches besides one.\n   * @return {!ReactDOMComponent} The one match.\n   */\n  findRenderedDOMComponentWithClass: function (root, className) {\n    var all = ReactTestUtils.scryRenderedDOMComponentsWithClass(root, className);\n\n    if (all.length !== 1) {\n      throw new Error('Did not find exactly one match ' + '(found: ' + all.length + ') for class:' + className);\n    }\n\n    return all[0];\n  },\n\n  /**\n   * Finds all instance of components in the rendered tree that are DOM\n   * components with the tag name matching `tagName`.\n   * @return an array of all the matches.\n   */\n  scryRenderedDOMComponentsWithTag: function (root, tagName) {\n    return ReactTestUtils.findAllInRenderedTree(root, function (inst) {\n      return ReactTestUtils.isDOMComponent(inst) && inst.tagName === tagName.toUpperCase();\n    });\n  },\n\n  /**\n   * Like scryRenderedDOMComponentsWithTag but expects there to be one result,\n   * and returns that one result, or throws exception if there is any other\n   * number of matches besides one.\n   * @return {!ReactDOMComponent} The one match.\n   */\n  findRenderedDOMComponentWithTag: function (root, tagName) {\n    var all = ReactTestUtils.scryRenderedDOMComponentsWithTag(root, tagName);\n\n    if (all.length !== 1) {\n      throw new Error('Did not find exactly one match for tag:' + tagName);\n    }\n\n    return all[0];\n  },\n\n  /**\n   * Finds all instances of components with type equal to `componentType`.\n   * @return an array of all the matches.\n   */\n  scryRenderedComponentsWithType: function (root, componentType) {\n    return ReactTestUtils.findAllInRenderedTree(root, function (inst) {\n      return ReactTestUtils.isCompositeComponentWithType(inst, componentType);\n    });\n  },\n\n  /**\n   * Same as `scryRenderedComponentsWithType` but expects there to be one result\n   * and returns that one result, or throws exception if there is any other\n   * number of matches besides one.\n   * @return {!ReactComponent} The one match.\n   */\n  findRenderedComponentWithType: function (root, componentType) {\n    var all = ReactTestUtils.scryRenderedComponentsWithType(root, componentType);\n\n    if (all.length !== 1) {\n      throw new Error('Did not find exactly one match for componentType:' + componentType);\n    }\n\n    return all[0];\n  },\n\n  /**\n   * Pass a mocked component module to this method to augment it with\n   * useful methods that allow it to be used as a dummy React component.\n   * Instead of rendering as usual, the component will become a simple\n   * <div> containing any provided children.\n   *\n   * @param {object} module the mock function object exported from a\n   *                        module that defines the component to be mocked\n   * @param {?string} mockTagName optional dummy root tag name to return\n   *                              from render method (overrides\n   *                              module.mockTagName if provided)\n   * @return {object} the ReactTestUtils object (for chaining)\n   */\n  mockComponent: function (module, mockTagName) {\n    mockTagName = mockTagName || module.mockTagName || \"div\";\n    module.prototype.render.mockImplementation(function () {\n      return React.createElement(mockTagName, null, this.props.children);\n    });\n    return this;\n  },\n\n  /**\n   * Simulates a top level event being dispatched from a raw event that occured\n   * on an `Element` node.\n   * @param topLevelType {Object} A type from `EventConstants.topLevelTypes`\n   * @param {!Element} node The dom to simulate an event occurring on.\n   * @param {?Event} fakeNativeEvent Fake native event to use in SyntheticEvent.\n   */\n  simulateNativeEventOnNode: function (topLevelType, node, fakeNativeEvent) {\n    fakeNativeEvent.target = node;\n    ReactBrowserEventEmitter.ReactEventListener.dispatchEvent(topLevelType, fakeNativeEvent);\n  },\n\n  /**\n   * Simulates a top level event being dispatched from a raw event that occured\n   * on the `ReactDOMComponent` `comp`.\n   * @param topLevelType {Object} A type from `EventConstants.topLevelTypes`.\n   * @param comp {!ReactDOMComponent}\n   * @param {?Event} fakeNativeEvent Fake native event to use in SyntheticEvent.\n   */\n  simulateNativeEventOnDOMComponent: function (topLevelType, comp, fakeNativeEvent) {\n    ReactTestUtils.simulateNativeEventOnNode(topLevelType, comp.getDOMNode(), fakeNativeEvent);\n  },\n  nativeTouchData: function (x, y) {\n    return {\n      touches: [{\n        pageX: x,\n        pageY: y\n      }]\n    };\n  },\n  createRenderer: function () {\n    return new ReactShallowRenderer();\n  },\n  Simulate: null,\n  SimulateNative: {}\n};\n/**\n * @class ReactShallowRenderer\n */\n\nvar ReactShallowRenderer = function () {\n  this._instance = null;\n};\n\nReactShallowRenderer.prototype.getRenderOutput = function () {\n  return this._instance && this._instance._renderedComponent && this._instance._renderedComponent._renderedOutput || null;\n};\n\nvar NoopInternalComponent = function (element) {\n  this._renderedOutput = element;\n  this._currentElement = element === null || element === false ? ReactEmptyComponent.emptyElement : element;\n};\n\nNoopInternalComponent.prototype = {\n  mountComponent: function () {},\n  receiveComponent: function (element) {\n    this._renderedOutput = element;\n    this._currentElement = element === null || element === false ? ReactEmptyComponent.emptyElement : element;\n  },\n  unmountComponent: function () {}\n};\n\nvar ShallowComponentWrapper = function () {};\n\nassign(ShallowComponentWrapper.prototype, ReactCompositeComponent.Mixin, {\n  _instantiateReactComponent: function (element) {\n    return new NoopInternalComponent(element);\n  },\n  _replaceNodeWithMarkupByID: function () {},\n  _renderValidatedComponent: ReactCompositeComponent.Mixin._renderValidatedComponentWithoutOwnerOrContext\n});\n\nReactShallowRenderer.prototype.render = function (element, context) {\n  if (!context) {\n    context = emptyObject;\n  }\n\n  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();\n\n  this._render(element, transaction, context);\n\n  ReactUpdates.ReactReconcileTransaction.release(transaction);\n};\n\nReactShallowRenderer.prototype.unmount = function () {\n  if (this._instance) {\n    this._instance.unmountComponent();\n  }\n};\n\nReactShallowRenderer.prototype._render = function (element, transaction, context) {\n  if (!this._instance) {\n    var rootID = ReactInstanceHandles.createReactRootID();\n    var instance = new ShallowComponentWrapper(element.type);\n    instance.construct(element);\n    instance.mountComponent(rootID, transaction, context);\n    this._instance = instance;\n  } else {\n    this._instance.receiveComponent(element, transaction, context);\n  }\n};\n/**\n * Exports:\n *\n * - `ReactTestUtils.Simulate.click(Element/ReactDOMComponent)`\n * - `ReactTestUtils.Simulate.mouseMove(Element/ReactDOMComponent)`\n * - `ReactTestUtils.Simulate.change(Element/ReactDOMComponent)`\n * - ... (All keys from event plugin `eventTypes` objects)\n */\n\n\nfunction makeSimulator(eventType) {\n  return function (domComponentOrNode, eventData) {\n    var node;\n\n    if (ReactTestUtils.isDOMComponent(domComponentOrNode)) {\n      node = domComponentOrNode.getDOMNode();\n    } else if (domComponentOrNode.tagName) {\n      node = domComponentOrNode;\n    }\n\n    var fakeNativeEvent = new Event();\n    fakeNativeEvent.target = node; // We don't use SyntheticEvent.getPooled in order to not have to worry about\n    // properly destroying any properties assigned from `eventData` upon release\n\n    var event = new SyntheticEvent(ReactBrowserEventEmitter.eventNameDispatchConfigs[eventType], ReactMount.getID(node), fakeNativeEvent);\n    assign(event, eventData);\n    EventPropagators.accumulateTwoPhaseDispatches(event);\n    ReactUpdates.batchedUpdates(function () {\n      EventPluginHub.enqueueEvents(event);\n      EventPluginHub.processEventQueue();\n    });\n  };\n}\n\nfunction buildSimulators() {\n  ReactTestUtils.Simulate = {};\n  var eventType;\n\n  for (eventType in ReactBrowserEventEmitter.eventNameDispatchConfigs) {\n    /**\n     * @param {!Element || ReactDOMComponent} domComponentOrNode\n     * @param {?object} eventData Fake event data to use in SyntheticEvent.\n     */\n    ReactTestUtils.Simulate[eventType] = makeSimulator(eventType);\n  }\n} // Rebuild ReactTestUtils.Simulate whenever event plugins are injected\n\n\nvar oldInjectEventPluginOrder = EventPluginHub.injection.injectEventPluginOrder;\n\nEventPluginHub.injection.injectEventPluginOrder = function () {\n  oldInjectEventPluginOrder.apply(this, arguments);\n  buildSimulators();\n};\n\nvar oldInjectEventPlugins = EventPluginHub.injection.injectEventPluginsByName;\n\nEventPluginHub.injection.injectEventPluginsByName = function () {\n  oldInjectEventPlugins.apply(this, arguments);\n  buildSimulators();\n};\n\nbuildSimulators();\n/**\n * Exports:\n *\n * - `ReactTestUtils.SimulateNative.click(Element/ReactDOMComponent)`\n * - `ReactTestUtils.SimulateNative.mouseMove(Element/ReactDOMComponent)`\n * - `ReactTestUtils.SimulateNative.mouseIn/ReactDOMComponent)`\n * - `ReactTestUtils.SimulateNative.mouseOut(Element/ReactDOMComponent)`\n * - ... (All keys from `EventConstants.topLevelTypes`)\n *\n * Note: Top level event types are a subset of the entire set of handler types\n * (which include a broader set of \"synthetic\" events). For example, onDragDone\n * is a synthetic event. Except when testing an event plugin or React's event\n * handling code specifically, you probably want to use ReactTestUtils.Simulate\n * to dispatch synthetic events.\n */\n\nfunction makeNativeSimulator(eventType) {\n  return function (domComponentOrNode, nativeEventData) {\n    var fakeNativeEvent = new Event(eventType);\n    assign(fakeNativeEvent, nativeEventData);\n\n    if (ReactTestUtils.isDOMComponent(domComponentOrNode)) {\n      ReactTestUtils.simulateNativeEventOnDOMComponent(eventType, domComponentOrNode, fakeNativeEvent);\n    } else if (!!domComponentOrNode.tagName) {\n      // Will allow on actual dom nodes.\n      ReactTestUtils.simulateNativeEventOnNode(eventType, domComponentOrNode, fakeNativeEvent);\n    }\n  };\n}\n\nvar eventType;\n\nfor (eventType in topLevelTypes) {\n  // Event type is stored as 'topClick' - we transform that to 'click'\n  var convenienceName = eventType.indexOf('top') === 0 ? eventType.charAt(3).toLowerCase() + eventType.substr(4) : eventType;\n  /**\n   * @param {!Element || ReactDOMComponent} domComponentOrNode\n   * @param {?Event} nativeEventData Fake native event to use in SyntheticEvent.\n   */\n\n  ReactTestUtils.SimulateNative[convenienceName] = makeNativeSimulator(eventType);\n}\n\nmodule.exports = ReactTestUtils;","map":{"version":3,"names":["EventConstants","require","EventPluginHub","EventPropagators","React","ReactElement","ReactEmptyComponent","ReactBrowserEventEmitter","ReactCompositeComponent","ReactInstanceHandles","ReactInstanceMap","ReactMount","ReactUpdates","SyntheticEvent","assign","emptyObject","topLevelTypes","Event","suffix","ReactTestUtils","renderIntoDocument","instance","div","document","createElement","render","isElement","element","isValidElement","isElementOfType","inst","convenienceConstructor","type","isDOMComponent","tagName","getDOMNode","isDOMComponentElement","isCompositeComponent","setState","isCompositeComponentWithType","constructor","isCompositeComponentElement","prototype","isCompositeComponentElementWithType","getRenderedChildOfCompositeComponent","internalInstance","get","_renderedComponent","getPublicInstance","findAllInRenderedTree","test","ret","renderedChildren","_renderedChildren","key","hasOwnProperty","concat","scryRenderedDOMComponentsWithClass","root","className","instClassName","props","indexOf","findRenderedDOMComponentWithClass","all","length","Error","scryRenderedDOMComponentsWithTag","toUpperCase","findRenderedDOMComponentWithTag","scryRenderedComponentsWithType","componentType","findRenderedComponentWithType","mockComponent","module","mockTagName","mockImplementation","children","simulateNativeEventOnNode","topLevelType","node","fakeNativeEvent","target","ReactEventListener","dispatchEvent","simulateNativeEventOnDOMComponent","comp","nativeTouchData","x","y","touches","pageX","pageY","createRenderer","ReactShallowRenderer","Simulate","SimulateNative","_instance","getRenderOutput","_renderedOutput","NoopInternalComponent","_currentElement","emptyElement","mountComponent","receiveComponent","unmountComponent","ShallowComponentWrapper","Mixin","_instantiateReactComponent","_replaceNodeWithMarkupByID","_renderValidatedComponent","_renderValidatedComponentWithoutOwnerOrContext","context","transaction","ReactReconcileTransaction","getPooled","_render","release","unmount","rootID","createReactRootID","construct","makeSimulator","eventType","domComponentOrNode","eventData","event","eventNameDispatchConfigs","getID","accumulateTwoPhaseDispatches","batchedUpdates","enqueueEvents","processEventQueue","buildSimulators","oldInjectEventPluginOrder","injection","injectEventPluginOrder","apply","arguments","oldInjectEventPlugins","injectEventPluginsByName","makeNativeSimulator","nativeEventData","convenienceName","charAt","toLowerCase","substr","exports"],"sources":["/Users/ozigun1988/Desktop/git/project/sosyete-frontend/node_modules/react-upvote/node_modules/react/lib/ReactTestUtils.js"],"sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactTestUtils\n */\n\n'use strict';\n\nvar EventConstants = require(\"./EventConstants\");\nvar EventPluginHub = require(\"./EventPluginHub\");\nvar EventPropagators = require(\"./EventPropagators\");\nvar React = require(\"./React\");\nvar ReactElement = require(\"./ReactElement\");\nvar ReactEmptyComponent = require(\"./ReactEmptyComponent\");\nvar ReactBrowserEventEmitter = require(\"./ReactBrowserEventEmitter\");\nvar ReactCompositeComponent = require(\"./ReactCompositeComponent\");\nvar ReactInstanceHandles = require(\"./ReactInstanceHandles\");\nvar ReactInstanceMap = require(\"./ReactInstanceMap\");\nvar ReactMount = require(\"./ReactMount\");\nvar ReactUpdates = require(\"./ReactUpdates\");\nvar SyntheticEvent = require(\"./SyntheticEvent\");\n\nvar assign = require(\"./Object.assign\");\nvar emptyObject = require(\"./emptyObject\");\n\nvar topLevelTypes = EventConstants.topLevelTypes;\n\nfunction Event(suffix) {}\n\n/**\n * @class ReactTestUtils\n */\n\n/**\n * Todo: Support the entire DOM.scry query syntax. For now, these simple\n * utilities will suffice for testing purposes.\n * @lends ReactTestUtils\n */\nvar ReactTestUtils = {\n  renderIntoDocument: function(instance) {\n    var div = document.createElement('div');\n    // None of our tests actually require attaching the container to the\n    // DOM, and doing so creates a mess that we rely on test isolation to\n    // clean up, so we're going to stop honoring the name of this method\n    // (and probably rename it eventually) if no problems arise.\n    // document.documentElement.appendChild(div);\n    return React.render(instance, div);\n  },\n\n  isElement: function(element) {\n    return ReactElement.isValidElement(element);\n  },\n\n  isElementOfType: function(inst, convenienceConstructor) {\n    return (\n      ReactElement.isValidElement(inst) &&\n      inst.type === convenienceConstructor\n    );\n  },\n\n  isDOMComponent: function(inst) {\n    // TODO: Fix this heuristic. It's just here because composites can currently\n    // pretend to be DOM components.\n    return !!(inst && inst.tagName && inst.getDOMNode);\n  },\n\n  isDOMComponentElement: function(inst) {\n    return !!(inst &&\n              ReactElement.isValidElement(inst) &&\n              !!inst.tagName);\n  },\n\n  isCompositeComponent: function(inst) {\n    return typeof inst.render === 'function' &&\n           typeof inst.setState === 'function';\n  },\n\n  isCompositeComponentWithType: function(inst, type) {\n    return !!(ReactTestUtils.isCompositeComponent(inst) &&\n             (inst.constructor === type));\n  },\n\n  isCompositeComponentElement: function(inst) {\n    if (!ReactElement.isValidElement(inst)) {\n      return false;\n    }\n    // We check the prototype of the type that will get mounted, not the\n    // instance itself. This is a future proof way of duck typing.\n    var prototype = inst.type.prototype;\n    return (\n      typeof prototype.render === 'function' &&\n      typeof prototype.setState === 'function'\n    );\n  },\n\n  isCompositeComponentElementWithType: function(inst, type) {\n    return !!(ReactTestUtils.isCompositeComponentElement(inst) &&\n             (inst.constructor === type));\n  },\n\n  getRenderedChildOfCompositeComponent: function(inst) {\n    if (!ReactTestUtils.isCompositeComponent(inst)) {\n      return null;\n    }\n    var internalInstance = ReactInstanceMap.get(inst);\n    return internalInstance._renderedComponent.getPublicInstance();\n  },\n\n  findAllInRenderedTree: function(inst, test) {\n    if (!inst) {\n      return [];\n    }\n    var ret = test(inst) ? [inst] : [];\n    if (ReactTestUtils.isDOMComponent(inst)) {\n      var internalInstance = ReactInstanceMap.get(inst);\n      var renderedChildren = internalInstance\n        ._renderedComponent\n        ._renderedChildren;\n      var key;\n      for (key in renderedChildren) {\n        if (!renderedChildren.hasOwnProperty(key)) {\n          continue;\n        }\n        if (!renderedChildren[key].getPublicInstance) {\n          continue;\n        }\n        ret = ret.concat(\n          ReactTestUtils.findAllInRenderedTree(\n            renderedChildren[key].getPublicInstance(),\n            test\n          )\n        );\n      }\n    } else if (ReactTestUtils.isCompositeComponent(inst)) {\n      ret = ret.concat(\n        ReactTestUtils.findAllInRenderedTree(\n          ReactTestUtils.getRenderedChildOfCompositeComponent(inst),\n          test\n        )\n      );\n    }\n    return ret;\n  },\n\n  /**\n   * Finds all instance of components in the rendered tree that are DOM\n   * components with the class name matching `className`.\n   * @return an array of all the matches.\n   */\n  scryRenderedDOMComponentsWithClass: function(root, className) {\n    return ReactTestUtils.findAllInRenderedTree(root, function(inst) {\n      var instClassName = inst.props.className;\n      return ReactTestUtils.isDOMComponent(inst) && (\n        (instClassName && (' ' + instClassName + ' ').indexOf(' ' + className + ' ') !== -1)\n      );\n    });\n  },\n\n  /**\n   * Like scryRenderedDOMComponentsWithClass but expects there to be one result,\n   * and returns that one result, or throws exception if there is any other\n   * number of matches besides one.\n   * @return {!ReactDOMComponent} The one match.\n   */\n  findRenderedDOMComponentWithClass: function(root, className) {\n    var all =\n      ReactTestUtils.scryRenderedDOMComponentsWithClass(root, className);\n    if (all.length !== 1) {\n      throw new Error('Did not find exactly one match ' +\n        '(found: ' + all.length + ') for class:' + className\n      );\n    }\n    return all[0];\n  },\n\n\n  /**\n   * Finds all instance of components in the rendered tree that are DOM\n   * components with the tag name matching `tagName`.\n   * @return an array of all the matches.\n   */\n  scryRenderedDOMComponentsWithTag: function(root, tagName) {\n    return ReactTestUtils.findAllInRenderedTree(root, function(inst) {\n      return ReactTestUtils.isDOMComponent(inst) &&\n            inst.tagName === tagName.toUpperCase();\n    });\n  },\n\n  /**\n   * Like scryRenderedDOMComponentsWithTag but expects there to be one result,\n   * and returns that one result, or throws exception if there is any other\n   * number of matches besides one.\n   * @return {!ReactDOMComponent} The one match.\n   */\n  findRenderedDOMComponentWithTag: function(root, tagName) {\n    var all = ReactTestUtils.scryRenderedDOMComponentsWithTag(root, tagName);\n    if (all.length !== 1) {\n      throw new Error('Did not find exactly one match for tag:' + tagName);\n    }\n    return all[0];\n  },\n\n\n  /**\n   * Finds all instances of components with type equal to `componentType`.\n   * @return an array of all the matches.\n   */\n  scryRenderedComponentsWithType: function(root, componentType) {\n    return ReactTestUtils.findAllInRenderedTree(root, function(inst) {\n      return ReactTestUtils.isCompositeComponentWithType(\n        inst,\n        componentType\n      );\n    });\n  },\n\n  /**\n   * Same as `scryRenderedComponentsWithType` but expects there to be one result\n   * and returns that one result, or throws exception if there is any other\n   * number of matches besides one.\n   * @return {!ReactComponent} The one match.\n   */\n  findRenderedComponentWithType: function(root, componentType) {\n    var all = ReactTestUtils.scryRenderedComponentsWithType(\n      root,\n      componentType\n    );\n    if (all.length !== 1) {\n      throw new Error(\n        'Did not find exactly one match for componentType:' + componentType\n      );\n    }\n    return all[0];\n  },\n\n  /**\n   * Pass a mocked component module to this method to augment it with\n   * useful methods that allow it to be used as a dummy React component.\n   * Instead of rendering as usual, the component will become a simple\n   * <div> containing any provided children.\n   *\n   * @param {object} module the mock function object exported from a\n   *                        module that defines the component to be mocked\n   * @param {?string} mockTagName optional dummy root tag name to return\n   *                              from render method (overrides\n   *                              module.mockTagName if provided)\n   * @return {object} the ReactTestUtils object (for chaining)\n   */\n  mockComponent: function(module, mockTagName) {\n    mockTagName = mockTagName || module.mockTagName || \"div\";\n\n    module.prototype.render.mockImplementation(function() {\n      return React.createElement(\n        mockTagName,\n        null,\n        this.props.children\n      );\n    });\n\n    return this;\n  },\n\n  /**\n   * Simulates a top level event being dispatched from a raw event that occured\n   * on an `Element` node.\n   * @param topLevelType {Object} A type from `EventConstants.topLevelTypes`\n   * @param {!Element} node The dom to simulate an event occurring on.\n   * @param {?Event} fakeNativeEvent Fake native event to use in SyntheticEvent.\n   */\n  simulateNativeEventOnNode: function(topLevelType, node, fakeNativeEvent) {\n    fakeNativeEvent.target = node;\n    ReactBrowserEventEmitter.ReactEventListener.dispatchEvent(\n      topLevelType,\n      fakeNativeEvent\n    );\n  },\n\n  /**\n   * Simulates a top level event being dispatched from a raw event that occured\n   * on the `ReactDOMComponent` `comp`.\n   * @param topLevelType {Object} A type from `EventConstants.topLevelTypes`.\n   * @param comp {!ReactDOMComponent}\n   * @param {?Event} fakeNativeEvent Fake native event to use in SyntheticEvent.\n   */\n  simulateNativeEventOnDOMComponent: function(\n      topLevelType,\n      comp,\n      fakeNativeEvent) {\n    ReactTestUtils.simulateNativeEventOnNode(\n      topLevelType,\n      comp.getDOMNode(),\n      fakeNativeEvent\n    );\n  },\n\n  nativeTouchData: function(x, y) {\n    return {\n      touches: [\n        {pageX: x, pageY: y}\n      ]\n    };\n  },\n\n  createRenderer: function() {\n    return new ReactShallowRenderer();\n  },\n\n  Simulate: null,\n  SimulateNative: {}\n};\n\n/**\n * @class ReactShallowRenderer\n */\nvar ReactShallowRenderer = function() {\n  this._instance = null;\n};\n\nReactShallowRenderer.prototype.getRenderOutput = function() {\n  return (\n    (this._instance && this._instance._renderedComponent &&\n     this._instance._renderedComponent._renderedOutput)\n    || null\n  );\n};\n\nvar NoopInternalComponent = function(element) {\n  this._renderedOutput = element;\n  this._currentElement = element === null || element === false ?\n    ReactEmptyComponent.emptyElement :\n    element;\n};\n\nNoopInternalComponent.prototype = {\n\n  mountComponent: function() {\n  },\n\n  receiveComponent: function(element) {\n    this._renderedOutput = element;\n    this._currentElement = element === null || element === false ?\n      ReactEmptyComponent.emptyElement :\n      element;\n  },\n\n  unmountComponent: function() {\n  }\n\n};\n\nvar ShallowComponentWrapper = function() { };\nassign(\n  ShallowComponentWrapper.prototype,\n  ReactCompositeComponent.Mixin, {\n    _instantiateReactComponent: function(element) {\n      return new NoopInternalComponent(element);\n    },\n    _replaceNodeWithMarkupByID: function() {},\n    _renderValidatedComponent:\n      ReactCompositeComponent.Mixin.\n        _renderValidatedComponentWithoutOwnerOrContext\n  }\n);\n\nReactShallowRenderer.prototype.render = function(element, context) {\n  if (!context) {\n    context = emptyObject;\n  }\n  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();\n  this._render(element, transaction, context);\n  ReactUpdates.ReactReconcileTransaction.release(transaction);\n};\n\nReactShallowRenderer.prototype.unmount = function() {\n  if (this._instance) {\n    this._instance.unmountComponent();\n  }\n};\n\nReactShallowRenderer.prototype._render = function(element, transaction, context) {\n  if (!this._instance) {\n    var rootID = ReactInstanceHandles.createReactRootID();\n    var instance = new ShallowComponentWrapper(element.type);\n    instance.construct(element);\n\n    instance.mountComponent(rootID, transaction, context);\n\n    this._instance = instance;\n  } else {\n    this._instance.receiveComponent(element, transaction, context);\n  }\n};\n\n/**\n * Exports:\n *\n * - `ReactTestUtils.Simulate.click(Element/ReactDOMComponent)`\n * - `ReactTestUtils.Simulate.mouseMove(Element/ReactDOMComponent)`\n * - `ReactTestUtils.Simulate.change(Element/ReactDOMComponent)`\n * - ... (All keys from event plugin `eventTypes` objects)\n */\nfunction makeSimulator(eventType) {\n  return function(domComponentOrNode, eventData) {\n    var node;\n    if (ReactTestUtils.isDOMComponent(domComponentOrNode)) {\n      node = domComponentOrNode.getDOMNode();\n    } else if (domComponentOrNode.tagName) {\n      node = domComponentOrNode;\n    }\n\n    var fakeNativeEvent = new Event();\n    fakeNativeEvent.target = node;\n    // We don't use SyntheticEvent.getPooled in order to not have to worry about\n    // properly destroying any properties assigned from `eventData` upon release\n    var event = new SyntheticEvent(\n      ReactBrowserEventEmitter.eventNameDispatchConfigs[eventType],\n      ReactMount.getID(node),\n      fakeNativeEvent\n    );\n    assign(event, eventData);\n    EventPropagators.accumulateTwoPhaseDispatches(event);\n\n    ReactUpdates.batchedUpdates(function() {\n      EventPluginHub.enqueueEvents(event);\n      EventPluginHub.processEventQueue();\n    });\n  };\n}\n\nfunction buildSimulators() {\n  ReactTestUtils.Simulate = {};\n\n  var eventType;\n  for (eventType in ReactBrowserEventEmitter.eventNameDispatchConfigs) {\n    /**\n     * @param {!Element || ReactDOMComponent} domComponentOrNode\n     * @param {?object} eventData Fake event data to use in SyntheticEvent.\n     */\n    ReactTestUtils.Simulate[eventType] = makeSimulator(eventType);\n  }\n}\n\n// Rebuild ReactTestUtils.Simulate whenever event plugins are injected\nvar oldInjectEventPluginOrder = EventPluginHub.injection.injectEventPluginOrder;\nEventPluginHub.injection.injectEventPluginOrder = function() {\n  oldInjectEventPluginOrder.apply(this, arguments);\n  buildSimulators();\n};\nvar oldInjectEventPlugins = EventPluginHub.injection.injectEventPluginsByName;\nEventPluginHub.injection.injectEventPluginsByName = function() {\n  oldInjectEventPlugins.apply(this, arguments);\n  buildSimulators();\n};\n\nbuildSimulators();\n\n/**\n * Exports:\n *\n * - `ReactTestUtils.SimulateNative.click(Element/ReactDOMComponent)`\n * - `ReactTestUtils.SimulateNative.mouseMove(Element/ReactDOMComponent)`\n * - `ReactTestUtils.SimulateNative.mouseIn/ReactDOMComponent)`\n * - `ReactTestUtils.SimulateNative.mouseOut(Element/ReactDOMComponent)`\n * - ... (All keys from `EventConstants.topLevelTypes`)\n *\n * Note: Top level event types are a subset of the entire set of handler types\n * (which include a broader set of \"synthetic\" events). For example, onDragDone\n * is a synthetic event. Except when testing an event plugin or React's event\n * handling code specifically, you probably want to use ReactTestUtils.Simulate\n * to dispatch synthetic events.\n */\n\nfunction makeNativeSimulator(eventType) {\n  return function(domComponentOrNode, nativeEventData) {\n    var fakeNativeEvent = new Event(eventType);\n    assign(fakeNativeEvent, nativeEventData);\n    if (ReactTestUtils.isDOMComponent(domComponentOrNode)) {\n      ReactTestUtils.simulateNativeEventOnDOMComponent(\n        eventType,\n        domComponentOrNode,\n        fakeNativeEvent\n      );\n    } else if (!!domComponentOrNode.tagName) {\n      // Will allow on actual dom nodes.\n      ReactTestUtils.simulateNativeEventOnNode(\n        eventType,\n        domComponentOrNode,\n        fakeNativeEvent\n      );\n    }\n  };\n}\n\nvar eventType;\nfor (eventType in topLevelTypes) {\n  // Event type is stored as 'topClick' - we transform that to 'click'\n  var convenienceName = eventType.indexOf('top') === 0 ?\n    eventType.charAt(3).toLowerCase() + eventType.substr(4) : eventType;\n  /**\n   * @param {!Element || ReactDOMComponent} domComponentOrNode\n   * @param {?Event} nativeEventData Fake native event to use in SyntheticEvent.\n   */\n  ReactTestUtils.SimulateNative[convenienceName] =\n    makeNativeSimulator(eventType);\n}\n\nmodule.exports = ReactTestUtils;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}