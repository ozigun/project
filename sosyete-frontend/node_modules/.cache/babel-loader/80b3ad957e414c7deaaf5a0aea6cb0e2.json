{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactEventListener\n * @typechecks static-only\n */\n'use strict';\n\nvar EventListener = require(\"./EventListener\");\n\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\n\nvar PooledClass = require(\"./PooledClass\");\n\nvar ReactInstanceHandles = require(\"./ReactInstanceHandles\");\n\nvar ReactMount = require(\"./ReactMount\");\n\nvar ReactUpdates = require(\"./ReactUpdates\");\n\nvar assign = require(\"./Object.assign\");\n\nvar getEventTarget = require(\"./getEventTarget\");\n\nvar getUnboundedScrollPosition = require(\"./getUnboundedScrollPosition\");\n/**\n * Finds the parent React component of `node`.\n *\n * @param {*} node\n * @return {?DOMEventTarget} Parent container, or `null` if the specified node\n *                           is not nested.\n */\n\n\nfunction findParent(node) {\n  // TODO: It may be a good idea to cache this to prevent unnecessary DOM\n  // traversal, but caching is difficult to do correctly without using a\n  // mutation observer to listen for all DOM changes.\n  var nodeID = ReactMount.getID(node);\n  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);\n  var container = ReactMount.findReactContainerForID(rootID);\n  var parent = ReactMount.getFirstReactDOM(container);\n  return parent;\n} // Used to store ancestor hierarchy in top level callback\n\n\nfunction TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {\n  this.topLevelType = topLevelType;\n  this.nativeEvent = nativeEvent;\n  this.ancestors = [];\n}\n\nassign(TopLevelCallbackBookKeeping.prototype, {\n  destructor: function () {\n    this.topLevelType = null;\n    this.nativeEvent = null;\n    this.ancestors.length = 0;\n  }\n});\nPooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);\n\nfunction handleTopLevelImpl(bookKeeping) {\n  var topLevelTarget = ReactMount.getFirstReactDOM(getEventTarget(bookKeeping.nativeEvent)) || window; // Loop through the hierarchy, in case there's any nested components.\n  // It's important that we build the array of ancestors before calling any\n  // event handlers, because event handlers can modify the DOM, leading to\n  // inconsistencies with ReactMount's node cache. See #1105.\n\n  var ancestor = topLevelTarget;\n\n  while (ancestor) {\n    bookKeeping.ancestors.push(ancestor);\n    ancestor = findParent(ancestor);\n  }\n\n  for (var i = 0, l = bookKeeping.ancestors.length; i < l; i++) {\n    topLevelTarget = bookKeeping.ancestors[i];\n    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';\n\n    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, topLevelTarget, topLevelTargetID, bookKeeping.nativeEvent);\n  }\n}\n\nfunction scrollValueMonitor(cb) {\n  var scrollPosition = getUnboundedScrollPosition(window);\n  cb(scrollPosition);\n}\n\nvar ReactEventListener = {\n  _enabled: true,\n  _handleTopLevel: null,\n  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,\n  setHandleTopLevel: function (handleTopLevel) {\n    ReactEventListener._handleTopLevel = handleTopLevel;\n  },\n  setEnabled: function (enabled) {\n    ReactEventListener._enabled = !!enabled;\n  },\n  isEnabled: function () {\n    return ReactEventListener._enabled;\n  },\n\n  /**\n   * Traps top-level events by using event bubbling.\n   *\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {string} handlerBaseName Event name (e.g. \"click\").\n   * @param {object} handle Element on which to attach listener.\n   * @return {object} An object with a remove function which will forcefully\n   *                  remove the listener.\n   * @internal\n   */\n  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {\n    var element = handle;\n\n    if (!element) {\n      return null;\n    }\n\n    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));\n  },\n\n  /**\n   * Traps a top-level event by using event capturing.\n   *\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {string} handlerBaseName Event name (e.g. \"click\").\n   * @param {object} handle Element on which to attach listener.\n   * @return {object} An object with a remove function which will forcefully\n   *                  remove the listener.\n   * @internal\n   */\n  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {\n    var element = handle;\n\n    if (!element) {\n      return null;\n    }\n\n    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));\n  },\n  monitorScrollValue: function (refresh) {\n    var callback = scrollValueMonitor.bind(null, refresh);\n    EventListener.listen(window, 'scroll', callback);\n  },\n  dispatchEvent: function (topLevelType, nativeEvent) {\n    if (!ReactEventListener._enabled) {\n      return;\n    }\n\n    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);\n\n    try {\n      // Event queue being processed in the same cycle allows\n      // `preventDefault`.\n      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);\n    } finally {\n      TopLevelCallbackBookKeeping.release(bookKeeping);\n    }\n  }\n};\nmodule.exports = ReactEventListener;","map":{"version":3,"names":["EventListener","require","ExecutionEnvironment","PooledClass","ReactInstanceHandles","ReactMount","ReactUpdates","assign","getEventTarget","getUnboundedScrollPosition","findParent","node","nodeID","getID","rootID","getReactRootIDFromNodeID","container","findReactContainerForID","parent","getFirstReactDOM","TopLevelCallbackBookKeeping","topLevelType","nativeEvent","ancestors","prototype","destructor","length","addPoolingTo","twoArgumentPooler","handleTopLevelImpl","bookKeeping","topLevelTarget","window","ancestor","push","i","l","topLevelTargetID","ReactEventListener","_handleTopLevel","scrollValueMonitor","cb","scrollPosition","_enabled","WINDOW_HANDLE","canUseDOM","setHandleTopLevel","handleTopLevel","setEnabled","enabled","isEnabled","trapBubbledEvent","handlerBaseName","handle","element","listen","dispatchEvent","bind","trapCapturedEvent","capture","monitorScrollValue","refresh","callback","getPooled","batchedUpdates","release","module","exports"],"sources":["/Users/ozigun1988/Desktop/git/project/sosyete-frontend/node_modules/react-upvote/node_modules/react/lib/ReactEventListener.js"],"sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactEventListener\n * @typechecks static-only\n */\n\n'use strict';\n\nvar EventListener = require(\"./EventListener\");\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\nvar PooledClass = require(\"./PooledClass\");\nvar ReactInstanceHandles = require(\"./ReactInstanceHandles\");\nvar ReactMount = require(\"./ReactMount\");\nvar ReactUpdates = require(\"./ReactUpdates\");\n\nvar assign = require(\"./Object.assign\");\nvar getEventTarget = require(\"./getEventTarget\");\nvar getUnboundedScrollPosition = require(\"./getUnboundedScrollPosition\");\n\n/**\n * Finds the parent React component of `node`.\n *\n * @param {*} node\n * @return {?DOMEventTarget} Parent container, or `null` if the specified node\n *                           is not nested.\n */\nfunction findParent(node) {\n  // TODO: It may be a good idea to cache this to prevent unnecessary DOM\n  // traversal, but caching is difficult to do correctly without using a\n  // mutation observer to listen for all DOM changes.\n  var nodeID = ReactMount.getID(node);\n  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);\n  var container = ReactMount.findReactContainerForID(rootID);\n  var parent = ReactMount.getFirstReactDOM(container);\n  return parent;\n}\n\n// Used to store ancestor hierarchy in top level callback\nfunction TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {\n  this.topLevelType = topLevelType;\n  this.nativeEvent = nativeEvent;\n  this.ancestors = [];\n}\nassign(TopLevelCallbackBookKeeping.prototype, {\n  destructor: function() {\n    this.topLevelType = null;\n    this.nativeEvent = null;\n    this.ancestors.length = 0;\n  }\n});\nPooledClass.addPoolingTo(\n  TopLevelCallbackBookKeeping,\n  PooledClass.twoArgumentPooler\n);\n\nfunction handleTopLevelImpl(bookKeeping) {\n  var topLevelTarget = ReactMount.getFirstReactDOM(\n    getEventTarget(bookKeeping.nativeEvent)\n  ) || window;\n\n  // Loop through the hierarchy, in case there's any nested components.\n  // It's important that we build the array of ancestors before calling any\n  // event handlers, because event handlers can modify the DOM, leading to\n  // inconsistencies with ReactMount's node cache. See #1105.\n  var ancestor = topLevelTarget;\n  while (ancestor) {\n    bookKeeping.ancestors.push(ancestor);\n    ancestor = findParent(ancestor);\n  }\n\n  for (var i = 0, l = bookKeeping.ancestors.length; i < l; i++) {\n    topLevelTarget = bookKeeping.ancestors[i];\n    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';\n    ReactEventListener._handleTopLevel(\n      bookKeeping.topLevelType,\n      topLevelTarget,\n      topLevelTargetID,\n      bookKeeping.nativeEvent\n    );\n  }\n}\n\nfunction scrollValueMonitor(cb) {\n  var scrollPosition = getUnboundedScrollPosition(window);\n  cb(scrollPosition);\n}\n\nvar ReactEventListener = {\n  _enabled: true,\n  _handleTopLevel: null,\n\n  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,\n\n  setHandleTopLevel: function(handleTopLevel) {\n    ReactEventListener._handleTopLevel = handleTopLevel;\n  },\n\n  setEnabled: function(enabled) {\n    ReactEventListener._enabled = !!enabled;\n  },\n\n  isEnabled: function() {\n    return ReactEventListener._enabled;\n  },\n\n\n  /**\n   * Traps top-level events by using event bubbling.\n   *\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {string} handlerBaseName Event name (e.g. \"click\").\n   * @param {object} handle Element on which to attach listener.\n   * @return {object} An object with a remove function which will forcefully\n   *                  remove the listener.\n   * @internal\n   */\n  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {\n    var element = handle;\n    if (!element) {\n      return null;\n    }\n    return EventListener.listen(\n      element,\n      handlerBaseName,\n      ReactEventListener.dispatchEvent.bind(null, topLevelType)\n    );\n  },\n\n  /**\n   * Traps a top-level event by using event capturing.\n   *\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {string} handlerBaseName Event name (e.g. \"click\").\n   * @param {object} handle Element on which to attach listener.\n   * @return {object} An object with a remove function which will forcefully\n   *                  remove the listener.\n   * @internal\n   */\n  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {\n    var element = handle;\n    if (!element) {\n      return null;\n    }\n    return EventListener.capture(\n      element,\n      handlerBaseName,\n      ReactEventListener.dispatchEvent.bind(null, topLevelType)\n    );\n  },\n\n  monitorScrollValue: function(refresh) {\n    var callback = scrollValueMonitor.bind(null, refresh);\n    EventListener.listen(window, 'scroll', callback);\n  },\n\n  dispatchEvent: function(topLevelType, nativeEvent) {\n    if (!ReactEventListener._enabled) {\n      return;\n    }\n\n    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(\n      topLevelType,\n      nativeEvent\n    );\n    try {\n      // Event queue being processed in the same cycle allows\n      // `preventDefault`.\n      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);\n    } finally {\n      TopLevelCallbackBookKeeping.release(bookKeeping);\n    }\n  }\n};\n\nmodule.exports = ReactEventListener;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,aAAa,GAAGC,OAAO,CAAC,iBAAD,CAA3B;;AACA,IAAIC,oBAAoB,GAAGD,OAAO,CAAC,wBAAD,CAAlC;;AACA,IAAIE,WAAW,GAAGF,OAAO,CAAC,eAAD,CAAzB;;AACA,IAAIG,oBAAoB,GAAGH,OAAO,CAAC,wBAAD,CAAlC;;AACA,IAAII,UAAU,GAAGJ,OAAO,CAAC,cAAD,CAAxB;;AACA,IAAIK,YAAY,GAAGL,OAAO,CAAC,gBAAD,CAA1B;;AAEA,IAAIM,MAAM,GAAGN,OAAO,CAAC,iBAAD,CAApB;;AACA,IAAIO,cAAc,GAAGP,OAAO,CAAC,kBAAD,CAA5B;;AACA,IAAIQ,0BAA0B,GAAGR,OAAO,CAAC,8BAAD,CAAxC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASS,UAAT,CAAoBC,IAApB,EAA0B;EACxB;EACA;EACA;EACA,IAAIC,MAAM,GAAGP,UAAU,CAACQ,KAAX,CAAiBF,IAAjB,CAAb;EACA,IAAIG,MAAM,GAAGV,oBAAoB,CAACW,wBAArB,CAA8CH,MAA9C,CAAb;EACA,IAAII,SAAS,GAAGX,UAAU,CAACY,uBAAX,CAAmCH,MAAnC,CAAhB;EACA,IAAII,MAAM,GAAGb,UAAU,CAACc,gBAAX,CAA4BH,SAA5B,CAAb;EACA,OAAOE,MAAP;AACD,C,CAED;;;AACA,SAASE,2BAAT,CAAqCC,YAArC,EAAmDC,WAAnD,EAAgE;EAC9D,KAAKD,YAAL,GAAoBA,YAApB;EACA,KAAKC,WAAL,GAAmBA,WAAnB;EACA,KAAKC,SAAL,GAAiB,EAAjB;AACD;;AACDhB,MAAM,CAACa,2BAA2B,CAACI,SAA7B,EAAwC;EAC5CC,UAAU,EAAE,YAAW;IACrB,KAAKJ,YAAL,GAAoB,IAApB;IACA,KAAKC,WAAL,GAAmB,IAAnB;IACA,KAAKC,SAAL,CAAeG,MAAf,GAAwB,CAAxB;EACD;AAL2C,CAAxC,CAAN;AAOAvB,WAAW,CAACwB,YAAZ,CACEP,2BADF,EAEEjB,WAAW,CAACyB,iBAFd;;AAKA,SAASC,kBAAT,CAA4BC,WAA5B,EAAyC;EACvC,IAAIC,cAAc,GAAG1B,UAAU,CAACc,gBAAX,CACnBX,cAAc,CAACsB,WAAW,CAACR,WAAb,CADK,KAEhBU,MAFL,CADuC,CAKvC;EACA;EACA;EACA;;EACA,IAAIC,QAAQ,GAAGF,cAAf;;EACA,OAAOE,QAAP,EAAiB;IACfH,WAAW,CAACP,SAAZ,CAAsBW,IAAtB,CAA2BD,QAA3B;IACAA,QAAQ,GAAGvB,UAAU,CAACuB,QAAD,CAArB;EACD;;EAED,KAAK,IAAIE,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGN,WAAW,CAACP,SAAZ,CAAsBG,MAA1C,EAAkDS,CAAC,GAAGC,CAAtD,EAAyDD,CAAC,EAA1D,EAA8D;IAC5DJ,cAAc,GAAGD,WAAW,CAACP,SAAZ,CAAsBY,CAAtB,CAAjB;IACA,IAAIE,gBAAgB,GAAGhC,UAAU,CAACQ,KAAX,CAAiBkB,cAAjB,KAAoC,EAA3D;;IACAO,kBAAkB,CAACC,eAAnB,CACET,WAAW,CAACT,YADd,EAEEU,cAFF,EAGEM,gBAHF,EAIEP,WAAW,CAACR,WAJd;EAMD;AACF;;AAED,SAASkB,kBAAT,CAA4BC,EAA5B,EAAgC;EAC9B,IAAIC,cAAc,GAAGjC,0BAA0B,CAACuB,MAAD,CAA/C;EACAS,EAAE,CAACC,cAAD,CAAF;AACD;;AAED,IAAIJ,kBAAkB,GAAG;EACvBK,QAAQ,EAAE,IADa;EAEvBJ,eAAe,EAAE,IAFM;EAIvBK,aAAa,EAAE1C,oBAAoB,CAAC2C,SAArB,GAAiCb,MAAjC,GAA0C,IAJlC;EAMvBc,iBAAiB,EAAE,UAASC,cAAT,EAAyB;IAC1CT,kBAAkB,CAACC,eAAnB,GAAqCQ,cAArC;EACD,CARsB;EAUvBC,UAAU,EAAE,UAASC,OAAT,EAAkB;IAC5BX,kBAAkB,CAACK,QAAnB,GAA8B,CAAC,CAACM,OAAhC;EACD,CAZsB;EAcvBC,SAAS,EAAE,YAAW;IACpB,OAAOZ,kBAAkB,CAACK,QAA1B;EACD,CAhBsB;;EAmBvB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEQ,gBAAgB,EAAE,UAAS9B,YAAT,EAAuB+B,eAAvB,EAAwCC,MAAxC,EAAgD;IAChE,IAAIC,OAAO,GAAGD,MAAd;;IACA,IAAI,CAACC,OAAL,EAAc;MACZ,OAAO,IAAP;IACD;;IACD,OAAOtD,aAAa,CAACuD,MAAd,CACLD,OADK,EAELF,eAFK,EAGLd,kBAAkB,CAACkB,aAAnB,CAAiCC,IAAjC,CAAsC,IAAtC,EAA4CpC,YAA5C,CAHK,CAAP;EAKD,CAvCsB;;EAyCvB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEqC,iBAAiB,EAAE,UAASrC,YAAT,EAAuB+B,eAAvB,EAAwCC,MAAxC,EAAgD;IACjE,IAAIC,OAAO,GAAGD,MAAd;;IACA,IAAI,CAACC,OAAL,EAAc;MACZ,OAAO,IAAP;IACD;;IACD,OAAOtD,aAAa,CAAC2D,OAAd,CACLL,OADK,EAELF,eAFK,EAGLd,kBAAkB,CAACkB,aAAnB,CAAiCC,IAAjC,CAAsC,IAAtC,EAA4CpC,YAA5C,CAHK,CAAP;EAKD,CA7DsB;EA+DvBuC,kBAAkB,EAAE,UAASC,OAAT,EAAkB;IACpC,IAAIC,QAAQ,GAAGtB,kBAAkB,CAACiB,IAAnB,CAAwB,IAAxB,EAA8BI,OAA9B,CAAf;IACA7D,aAAa,CAACuD,MAAd,CAAqBvB,MAArB,EAA6B,QAA7B,EAAuC8B,QAAvC;EACD,CAlEsB;EAoEvBN,aAAa,EAAE,UAASnC,YAAT,EAAuBC,WAAvB,EAAoC;IACjD,IAAI,CAACgB,kBAAkB,CAACK,QAAxB,EAAkC;MAChC;IACD;;IAED,IAAIb,WAAW,GAAGV,2BAA2B,CAAC2C,SAA5B,CAChB1C,YADgB,EAEhBC,WAFgB,CAAlB;;IAIA,IAAI;MACF;MACA;MACAhB,YAAY,CAAC0D,cAAb,CAA4BnC,kBAA5B,EAAgDC,WAAhD;IACD,CAJD,SAIU;MACRV,2BAA2B,CAAC6C,OAA5B,CAAoCnC,WAApC;IACD;EACF;AApFsB,CAAzB;AAuFAoC,MAAM,CAACC,OAAP,GAAiB7B,kBAAjB"},"metadata":{},"sourceType":"script"}