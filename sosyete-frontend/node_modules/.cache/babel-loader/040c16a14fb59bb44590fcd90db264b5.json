{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMTextarea\n */\n'use strict';\n\nvar AutoFocusMixin = require(\"./AutoFocusMixin\");\n\nvar DOMPropertyOperations = require(\"./DOMPropertyOperations\");\n\nvar LinkedValueUtils = require(\"./LinkedValueUtils\");\n\nvar ReactBrowserComponentMixin = require(\"./ReactBrowserComponentMixin\");\n\nvar ReactClass = require(\"./ReactClass\");\n\nvar ReactElement = require(\"./ReactElement\");\n\nvar ReactUpdates = require(\"./ReactUpdates\");\n\nvar assign = require(\"./Object.assign\");\n\nvar invariant = require(\"./invariant\");\n\nvar warning = require(\"./warning\");\n\nvar textarea = ReactElement.createFactory('textarea');\n\nfunction forceUpdateIfMounted() {\n  /*jshint validthis:true */\n  if (this.isMounted()) {\n    this.forceUpdate();\n  }\n}\n/**\n * Implements a <textarea> native component that allows setting `value`, and\n * `defaultValue`. This differs from the traditional DOM API because value is\n * usually set as PCDATA children.\n *\n * If `value` is not supplied (or null/undefined), user actions that affect the\n * value will trigger updates to the element.\n *\n * If `value` is supplied (and not null/undefined), the rendered element will\n * not trigger updates to the element. Instead, the `value` prop must change in\n * order for the rendered element to be updated.\n *\n * The rendered element will be initialized with an empty value, the prop\n * `defaultValue` if specified, or the children content (deprecated).\n */\n\n\nvar ReactDOMTextarea = ReactClass.createClass({\n  displayName: 'ReactDOMTextarea',\n  tagName: 'TEXTAREA',\n  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],\n  getInitialState: function () {\n    var defaultValue = this.props.defaultValue; // TODO (yungsters): Remove support for children content in <textarea>.\n\n    var children = this.props.children;\n\n    if (children != null) {\n      if (\"production\" !== process.env.NODE_ENV) {\n        \"production\" !== process.env.NODE_ENV ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : null;\n      }\n\n      \"production\" !== process.env.NODE_ENV ? invariant(defaultValue == null, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : invariant(defaultValue == null);\n\n      if (Array.isArray(children)) {\n        \"production\" !== process.env.NODE_ENV ? invariant(children.length <= 1, '<textarea> can only have at most one child.') : invariant(children.length <= 1);\n        children = children[0];\n      }\n\n      defaultValue = '' + children;\n    }\n\n    if (defaultValue == null) {\n      defaultValue = '';\n    }\n\n    var value = LinkedValueUtils.getValue(this);\n    return {\n      // We save the initial value so that `ReactDOMComponent` doesn't update\n      // `textContent` (unnecessary since we update value).\n      // The initial value can be a boolean or object so that's why it's\n      // forced to be a string.\n      initialValue: '' + (value != null ? value : defaultValue)\n    };\n  },\n  render: function () {\n    // Clone `this.props` so we don't mutate the input.\n    var props = assign({}, this.props);\n    \"production\" !== process.env.NODE_ENV ? invariant(props.dangerouslySetInnerHTML == null, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : invariant(props.dangerouslySetInnerHTML == null);\n    props.defaultValue = null;\n    props.value = null;\n    props.onChange = this._handleChange; // Always set children to the same thing. In IE9, the selection range will\n    // get reset if `textContent` is mutated.\n\n    return textarea(props, this.state.initialValue);\n  },\n  componentDidUpdate: function (prevProps, prevState, prevContext) {\n    var value = LinkedValueUtils.getValue(this);\n\n    if (value != null) {\n      var rootNode = this.getDOMNode(); // Cast `value` to a string to ensure the value is set correctly. While\n      // browsers typically do this as necessary, jsdom doesn't.\n\n      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);\n    }\n  },\n  _handleChange: function (event) {\n    var returnValue;\n    var onChange = LinkedValueUtils.getOnChange(this);\n\n    if (onChange) {\n      returnValue = onChange.call(this, event);\n    }\n\n    ReactUpdates.asap(forceUpdateIfMounted, this);\n    return returnValue;\n  }\n});\nmodule.exports = ReactDOMTextarea;","map":{"version":3,"names":["AutoFocusMixin","require","DOMPropertyOperations","LinkedValueUtils","ReactBrowserComponentMixin","ReactClass","ReactElement","ReactUpdates","assign","invariant","warning","textarea","createFactory","forceUpdateIfMounted","isMounted","forceUpdate","ReactDOMTextarea","createClass","displayName","tagName","mixins","Mixin","getInitialState","defaultValue","props","children","process","env","NODE_ENV","Array","isArray","length","value","getValue","initialValue","render","dangerouslySetInnerHTML","onChange","_handleChange","state","componentDidUpdate","prevProps","prevState","prevContext","rootNode","getDOMNode","setValueForProperty","event","returnValue","getOnChange","call","asap","module","exports"],"sources":["/Users/ozigun1988/Desktop/git/project/sosyete-frontend/node_modules/react-upvote/node_modules/react/lib/ReactDOMTextarea.js"],"sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMTextarea\n */\n\n'use strict';\n\nvar AutoFocusMixin = require(\"./AutoFocusMixin\");\nvar DOMPropertyOperations = require(\"./DOMPropertyOperations\");\nvar LinkedValueUtils = require(\"./LinkedValueUtils\");\nvar ReactBrowserComponentMixin = require(\"./ReactBrowserComponentMixin\");\nvar ReactClass = require(\"./ReactClass\");\nvar ReactElement = require(\"./ReactElement\");\nvar ReactUpdates = require(\"./ReactUpdates\");\n\nvar assign = require(\"./Object.assign\");\nvar invariant = require(\"./invariant\");\n\nvar warning = require(\"./warning\");\n\nvar textarea = ReactElement.createFactory('textarea');\n\nfunction forceUpdateIfMounted() {\n  /*jshint validthis:true */\n  if (this.isMounted()) {\n    this.forceUpdate();\n  }\n}\n\n/**\n * Implements a <textarea> native component that allows setting `value`, and\n * `defaultValue`. This differs from the traditional DOM API because value is\n * usually set as PCDATA children.\n *\n * If `value` is not supplied (or null/undefined), user actions that affect the\n * value will trigger updates to the element.\n *\n * If `value` is supplied (and not null/undefined), the rendered element will\n * not trigger updates to the element. Instead, the `value` prop must change in\n * order for the rendered element to be updated.\n *\n * The rendered element will be initialized with an empty value, the prop\n * `defaultValue` if specified, or the children content (deprecated).\n */\nvar ReactDOMTextarea = ReactClass.createClass({\n  displayName: 'ReactDOMTextarea',\n  tagName: 'TEXTAREA',\n\n  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],\n\n  getInitialState: function() {\n    var defaultValue = this.props.defaultValue;\n    // TODO (yungsters): Remove support for children content in <textarea>.\n    var children = this.props.children;\n    if (children != null) {\n      if (\"production\" !== process.env.NODE_ENV) {\n        (\"production\" !== process.env.NODE_ENV ? warning(\n          false,\n          'Use the `defaultValue` or `value` props instead of setting ' +\n          'children on <textarea>.'\n        ) : null);\n      }\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        defaultValue == null,\n        'If you supply `defaultValue` on a <textarea>, do not pass children.'\n      ) : invariant(defaultValue == null));\n      if (Array.isArray(children)) {\n        (\"production\" !== process.env.NODE_ENV ? invariant(\n          children.length <= 1,\n          '<textarea> can only have at most one child.'\n        ) : invariant(children.length <= 1));\n        children = children[0];\n      }\n\n      defaultValue = '' + children;\n    }\n    if (defaultValue == null) {\n      defaultValue = '';\n    }\n    var value = LinkedValueUtils.getValue(this);\n    return {\n      // We save the initial value so that `ReactDOMComponent` doesn't update\n      // `textContent` (unnecessary since we update value).\n      // The initial value can be a boolean or object so that's why it's\n      // forced to be a string.\n      initialValue: '' + (value != null ? value : defaultValue)\n    };\n  },\n\n  render: function() {\n    // Clone `this.props` so we don't mutate the input.\n    var props = assign({}, this.props);\n\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      props.dangerouslySetInnerHTML == null,\n      '`dangerouslySetInnerHTML` does not make sense on <textarea>.'\n    ) : invariant(props.dangerouslySetInnerHTML == null));\n\n    props.defaultValue = null;\n    props.value = null;\n    props.onChange = this._handleChange;\n\n    // Always set children to the same thing. In IE9, the selection range will\n    // get reset if `textContent` is mutated.\n    return textarea(props, this.state.initialValue);\n  },\n\n  componentDidUpdate: function(prevProps, prevState, prevContext) {\n    var value = LinkedValueUtils.getValue(this);\n    if (value != null) {\n      var rootNode = this.getDOMNode();\n      // Cast `value` to a string to ensure the value is set correctly. While\n      // browsers typically do this as necessary, jsdom doesn't.\n      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);\n    }\n  },\n\n  _handleChange: function(event) {\n    var returnValue;\n    var onChange = LinkedValueUtils.getOnChange(this);\n    if (onChange) {\n      returnValue = onChange.call(this, event);\n    }\n    ReactUpdates.asap(forceUpdateIfMounted, this);\n    return returnValue;\n  }\n\n});\n\nmodule.exports = ReactDOMTextarea;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}