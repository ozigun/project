{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule CSSCore\n * @typechecks\n */\nvar invariant = require(\"./invariant\");\n/**\n * The CSSCore module specifies the API (and implements most of the methods)\n * that should be used when dealing with the display of elements (via their\n * CSS classes and visibility on screen. It is an API focused on mutating the\n * display and not reading it as no logical state should be encoded in the\n * display of elements.\n */\n\n\nvar CSSCore = {\n  /**\n   * Adds the class passed in to the element if it doesn't already have it.\n   *\n   * @param {DOMElement} element the element to set the class on\n   * @param {string} className the CSS className\n   * @return {DOMElement} the element passed in\n   */\n  addClass: function (element, className) {\n    \"production\" !== process.env.NODE_ENV ? invariant(!/\\s/.test(className), 'CSSCore.addClass takes only a single class name. \"%s\" contains ' + 'multiple classes.', className) : invariant(!/\\s/.test(className));\n\n    if (className) {\n      if (element.classList) {\n        element.classList.add(className);\n      } else if (!CSSCore.hasClass(element, className)) {\n        element.className = element.className + ' ' + className;\n      }\n    }\n\n    return element;\n  },\n\n  /**\n   * Removes the class passed in from the element\n   *\n   * @param {DOMElement} element the element to set the class on\n   * @param {string} className the CSS className\n   * @return {DOMElement} the element passed in\n   */\n  removeClass: function (element, className) {\n    \"production\" !== process.env.NODE_ENV ? invariant(!/\\s/.test(className), 'CSSCore.removeClass takes only a single class name. \"%s\" contains ' + 'multiple classes.', className) : invariant(!/\\s/.test(className));\n\n    if (className) {\n      if (element.classList) {\n        element.classList.remove(className);\n      } else if (CSSCore.hasClass(element, className)) {\n        element.className = element.className.replace(new RegExp('(^|\\\\s)' + className + '(?:\\\\s|$)', 'g'), '$1').replace(/\\s+/g, ' ') // multiple spaces to one\n        .replace(/^\\s*|\\s*$/g, ''); // trim the ends\n      }\n    }\n\n    return element;\n  },\n\n  /**\n   * Helper to add or remove a class from an element based on a condition.\n   *\n   * @param {DOMElement} element the element to set the class on\n   * @param {string} className the CSS className\n   * @param {*} bool condition to whether to add or remove the class\n   * @return {DOMElement} the element passed in\n   */\n  conditionClass: function (element, className, bool) {\n    return (bool ? CSSCore.addClass : CSSCore.removeClass)(element, className);\n  },\n\n  /**\n   * Tests whether the element has the class specified.\n   *\n   * @param {DOMNode|DOMWindow} element the element to set the class on\n   * @param {string} className the CSS className\n   * @return {boolean} true if the element has the class, false if not\n   */\n  hasClass: function (element, className) {\n    \"production\" !== process.env.NODE_ENV ? invariant(!/\\s/.test(className), 'CSS.hasClass takes only a single class name.') : invariant(!/\\s/.test(className));\n\n    if (element.classList) {\n      return !!className && element.classList.contains(className);\n    }\n\n    return (' ' + element.className + ' ').indexOf(' ' + className + ' ') > -1;\n  }\n};\nmodule.exports = CSSCore;","map":{"version":3,"names":["invariant","require","CSSCore","addClass","element","className","process","env","NODE_ENV","test","classList","add","hasClass","removeClass","remove","replace","RegExp","conditionClass","bool","contains","indexOf","module","exports"],"sources":["/Users/ozigun1988/Desktop/git/project/sosyete-frontend/node_modules/react-upvote/node_modules/react/lib/CSSCore.js"],"sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule CSSCore\n * @typechecks\n */\n\nvar invariant = require(\"./invariant\");\n\n/**\n * The CSSCore module specifies the API (and implements most of the methods)\n * that should be used when dealing with the display of elements (via their\n * CSS classes and visibility on screen. It is an API focused on mutating the\n * display and not reading it as no logical state should be encoded in the\n * display of elements.\n */\n\nvar CSSCore = {\n\n  /**\n   * Adds the class passed in to the element if it doesn't already have it.\n   *\n   * @param {DOMElement} element the element to set the class on\n   * @param {string} className the CSS className\n   * @return {DOMElement} the element passed in\n   */\n  addClass: function(element, className) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      !/\\s/.test(className),\n      'CSSCore.addClass takes only a single class name. \"%s\" contains ' +\n      'multiple classes.', className\n    ) : invariant(!/\\s/.test(className)));\n\n    if (className) {\n      if (element.classList) {\n        element.classList.add(className);\n      } else if (!CSSCore.hasClass(element, className)) {\n        element.className = element.className + ' ' + className;\n      }\n    }\n    return element;\n  },\n\n  /**\n   * Removes the class passed in from the element\n   *\n   * @param {DOMElement} element the element to set the class on\n   * @param {string} className the CSS className\n   * @return {DOMElement} the element passed in\n   */\n  removeClass: function(element, className) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      !/\\s/.test(className),\n      'CSSCore.removeClass takes only a single class name. \"%s\" contains ' +\n      'multiple classes.', className\n    ) : invariant(!/\\s/.test(className)));\n\n    if (className) {\n      if (element.classList) {\n        element.classList.remove(className);\n      } else if (CSSCore.hasClass(element, className)) {\n        element.className = element.className\n          .replace(new RegExp('(^|\\\\s)' + className + '(?:\\\\s|$)', 'g'), '$1')\n          .replace(/\\s+/g, ' ') // multiple spaces to one\n          .replace(/^\\s*|\\s*$/g, ''); // trim the ends\n      }\n    }\n    return element;\n  },\n\n  /**\n   * Helper to add or remove a class from an element based on a condition.\n   *\n   * @param {DOMElement} element the element to set the class on\n   * @param {string} className the CSS className\n   * @param {*} bool condition to whether to add or remove the class\n   * @return {DOMElement} the element passed in\n   */\n  conditionClass: function(element, className, bool) {\n    return (bool ? CSSCore.addClass : CSSCore.removeClass)(element, className);\n  },\n\n  /**\n   * Tests whether the element has the class specified.\n   *\n   * @param {DOMNode|DOMWindow} element the element to set the class on\n   * @param {string} className the CSS className\n   * @return {boolean} true if the element has the class, false if not\n   */\n  hasClass: function(element, className) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      !/\\s/.test(className),\n      'CSS.hasClass takes only a single class name.'\n    ) : invariant(!/\\s/.test(className)));\n    if (element.classList) {\n      return !!className && element.classList.contains(className);\n    }\n    return (' ' + element.className + ' ').indexOf(' ' + className + ' ') > -1;\n  }\n\n};\n\nmodule.exports = CSSCore;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}