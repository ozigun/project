{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDefaultPerfAnalysis\n */\nvar assign = require(\"./Object.assign\"); // Don't try to save users less than 1.2ms (a number I made up)\n\n\nvar DONT_CARE_THRESHOLD = 1.2;\nvar DOM_OPERATION_TYPES = {\n  '_mountImageIntoNode': 'set innerHTML',\n  INSERT_MARKUP: 'set innerHTML',\n  MOVE_EXISTING: 'move',\n  REMOVE_NODE: 'remove',\n  TEXT_CONTENT: 'set textContent',\n  'updatePropertyByID': 'update attribute',\n  'deletePropertyByID': 'delete attribute',\n  'updateStylesByID': 'update styles',\n  'updateInnerHTMLByID': 'set innerHTML',\n  'dangerouslyReplaceNodeWithMarkupByID': 'replace'\n};\n\nfunction getTotalTime(measurements) {\n  // TODO: return number of DOM ops? could be misleading.\n  // TODO: measure dropped frames after reconcile?\n  // TODO: log total time of each reconcile and the top-level component\n  // class that triggered it.\n  var totalTime = 0;\n\n  for (var i = 0; i < measurements.length; i++) {\n    var measurement = measurements[i];\n    totalTime += measurement.totalTime;\n  }\n\n  return totalTime;\n}\n\nfunction getDOMSummary(measurements) {\n  var items = [];\n\n  for (var i = 0; i < measurements.length; i++) {\n    var measurement = measurements[i];\n    var id;\n\n    for (id in measurement.writes) {\n      measurement.writes[id].forEach(function (write) {\n        items.push({\n          id: id,\n          type: DOM_OPERATION_TYPES[write.type] || write.type,\n          args: write.args\n        });\n      });\n    }\n  }\n\n  return items;\n}\n\nfunction getExclusiveSummary(measurements) {\n  var candidates = {};\n  var displayName;\n\n  for (var i = 0; i < measurements.length; i++) {\n    var measurement = measurements[i];\n    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);\n\n    for (var id in allIDs) {\n      displayName = measurement.displayNames[id].current;\n      candidates[displayName] = candidates[displayName] || {\n        componentName: displayName,\n        inclusive: 0,\n        exclusive: 0,\n        render: 0,\n        count: 0\n      };\n\n      if (measurement.render[id]) {\n        candidates[displayName].render += measurement.render[id];\n      }\n\n      if (measurement.exclusive[id]) {\n        candidates[displayName].exclusive += measurement.exclusive[id];\n      }\n\n      if (measurement.inclusive[id]) {\n        candidates[displayName].inclusive += measurement.inclusive[id];\n      }\n\n      if (measurement.counts[id]) {\n        candidates[displayName].count += measurement.counts[id];\n      }\n    }\n  } // Now make a sorted array with the results.\n\n\n  var arr = [];\n\n  for (displayName in candidates) {\n    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {\n      arr.push(candidates[displayName]);\n    }\n  }\n\n  arr.sort(function (a, b) {\n    return b.exclusive - a.exclusive;\n  });\n  return arr;\n}\n\nfunction getInclusiveSummary(measurements, onlyClean) {\n  var candidates = {};\n  var inclusiveKey;\n\n  for (var i = 0; i < measurements.length; i++) {\n    var measurement = measurements[i];\n    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);\n    var cleanComponents;\n\n    if (onlyClean) {\n      cleanComponents = getUnchangedComponents(measurement);\n    }\n\n    for (var id in allIDs) {\n      if (onlyClean && !cleanComponents[id]) {\n        continue;\n      }\n\n      var displayName = measurement.displayNames[id]; // Inclusive time is not useful for many components without knowing where\n      // they are instantiated. So we aggregate inclusive time with both the\n      // owner and current displayName as the key.\n\n      inclusiveKey = displayName.owner + ' > ' + displayName.current;\n      candidates[inclusiveKey] = candidates[inclusiveKey] || {\n        componentName: inclusiveKey,\n        time: 0,\n        count: 0\n      };\n\n      if (measurement.inclusive[id]) {\n        candidates[inclusiveKey].time += measurement.inclusive[id];\n      }\n\n      if (measurement.counts[id]) {\n        candidates[inclusiveKey].count += measurement.counts[id];\n      }\n    }\n  } // Now make a sorted array with the results.\n\n\n  var arr = [];\n\n  for (inclusiveKey in candidates) {\n    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {\n      arr.push(candidates[inclusiveKey]);\n    }\n  }\n\n  arr.sort(function (a, b) {\n    return b.time - a.time;\n  });\n  return arr;\n}\n\nfunction getUnchangedComponents(measurement) {\n  // For a given reconcile, look at which components did not actually\n  // render anything to the DOM and return a mapping of their ID to\n  // the amount of time it took to render the entire subtree.\n  var cleanComponents = {};\n  var dirtyLeafIDs = Object.keys(measurement.writes);\n  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);\n\n  for (var id in allIDs) {\n    var isDirty = false; // For each component that rendered, see if a component that triggered\n    // a DOM op is in its subtree.\n\n    for (var i = 0; i < dirtyLeafIDs.length; i++) {\n      if (dirtyLeafIDs[i].indexOf(id) === 0) {\n        isDirty = true;\n        break;\n      }\n    }\n\n    if (!isDirty && measurement.counts[id] > 0) {\n      cleanComponents[id] = true;\n    }\n  }\n\n  return cleanComponents;\n}\n\nvar ReactDefaultPerfAnalysis = {\n  getExclusiveSummary: getExclusiveSummary,\n  getInclusiveSummary: getInclusiveSummary,\n  getDOMSummary: getDOMSummary,\n  getTotalTime: getTotalTime\n};\nmodule.exports = ReactDefaultPerfAnalysis;","map":{"version":3,"names":["assign","require","DONT_CARE_THRESHOLD","DOM_OPERATION_TYPES","INSERT_MARKUP","MOVE_EXISTING","REMOVE_NODE","TEXT_CONTENT","getTotalTime","measurements","totalTime","i","length","measurement","getDOMSummary","items","id","writes","forEach","write","push","type","args","getExclusiveSummary","candidates","displayName","allIDs","exclusive","inclusive","displayNames","current","componentName","render","count","counts","arr","sort","a","b","getInclusiveSummary","onlyClean","inclusiveKey","cleanComponents","getUnchangedComponents","owner","time","dirtyLeafIDs","Object","keys","isDirty","indexOf","ReactDefaultPerfAnalysis","module","exports"],"sources":["/Users/ozigun1988/Desktop/git/project/sosyete-frontend/node_modules/react-upvote/node_modules/react/lib/ReactDefaultPerfAnalysis.js"],"sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDefaultPerfAnalysis\n */\n\nvar assign = require(\"./Object.assign\");\n\n// Don't try to save users less than 1.2ms (a number I made up)\nvar DONT_CARE_THRESHOLD = 1.2;\nvar DOM_OPERATION_TYPES = {\n  '_mountImageIntoNode': 'set innerHTML',\n  INSERT_MARKUP: 'set innerHTML',\n  MOVE_EXISTING: 'move',\n  REMOVE_NODE: 'remove',\n  TEXT_CONTENT: 'set textContent',\n  'updatePropertyByID': 'update attribute',\n  'deletePropertyByID': 'delete attribute',\n  'updateStylesByID': 'update styles',\n  'updateInnerHTMLByID': 'set innerHTML',\n  'dangerouslyReplaceNodeWithMarkupByID': 'replace'\n};\n\nfunction getTotalTime(measurements) {\n  // TODO: return number of DOM ops? could be misleading.\n  // TODO: measure dropped frames after reconcile?\n  // TODO: log total time of each reconcile and the top-level component\n  // class that triggered it.\n  var totalTime = 0;\n  for (var i = 0; i < measurements.length; i++) {\n    var measurement = measurements[i];\n    totalTime += measurement.totalTime;\n  }\n  return totalTime;\n}\n\nfunction getDOMSummary(measurements) {\n  var items = [];\n  for (var i = 0; i < measurements.length; i++) {\n    var measurement = measurements[i];\n    var id;\n\n    for (id in measurement.writes) {\n      measurement.writes[id].forEach(function(write) {\n        items.push({\n          id: id,\n          type: DOM_OPERATION_TYPES[write.type] || write.type,\n          args: write.args\n        });\n      });\n    }\n  }\n  return items;\n}\n\nfunction getExclusiveSummary(measurements) {\n  var candidates = {};\n  var displayName;\n\n  for (var i = 0; i < measurements.length; i++) {\n    var measurement = measurements[i];\n    var allIDs = assign(\n      {},\n      measurement.exclusive,\n      measurement.inclusive\n    );\n\n    for (var id in allIDs) {\n      displayName = measurement.displayNames[id].current;\n\n      candidates[displayName] = candidates[displayName] || {\n        componentName: displayName,\n        inclusive: 0,\n        exclusive: 0,\n        render: 0,\n        count: 0\n      };\n      if (measurement.render[id]) {\n        candidates[displayName].render += measurement.render[id];\n      }\n      if (measurement.exclusive[id]) {\n        candidates[displayName].exclusive += measurement.exclusive[id];\n      }\n      if (measurement.inclusive[id]) {\n        candidates[displayName].inclusive += measurement.inclusive[id];\n      }\n      if (measurement.counts[id]) {\n        candidates[displayName].count += measurement.counts[id];\n      }\n    }\n  }\n\n  // Now make a sorted array with the results.\n  var arr = [];\n  for (displayName in candidates) {\n    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {\n      arr.push(candidates[displayName]);\n    }\n  }\n\n  arr.sort(function(a, b) {\n    return b.exclusive - a.exclusive;\n  });\n\n  return arr;\n}\n\nfunction getInclusiveSummary(measurements, onlyClean) {\n  var candidates = {};\n  var inclusiveKey;\n\n  for (var i = 0; i < measurements.length; i++) {\n    var measurement = measurements[i];\n    var allIDs = assign(\n      {},\n      measurement.exclusive,\n      measurement.inclusive\n    );\n    var cleanComponents;\n\n    if (onlyClean) {\n      cleanComponents = getUnchangedComponents(measurement);\n    }\n\n    for (var id in allIDs) {\n      if (onlyClean && !cleanComponents[id]) {\n        continue;\n      }\n\n      var displayName = measurement.displayNames[id];\n\n      // Inclusive time is not useful for many components without knowing where\n      // they are instantiated. So we aggregate inclusive time with both the\n      // owner and current displayName as the key.\n      inclusiveKey = displayName.owner + ' > ' + displayName.current;\n\n      candidates[inclusiveKey] = candidates[inclusiveKey] || {\n        componentName: inclusiveKey,\n        time: 0,\n        count: 0\n      };\n\n      if (measurement.inclusive[id]) {\n        candidates[inclusiveKey].time += measurement.inclusive[id];\n      }\n      if (measurement.counts[id]) {\n        candidates[inclusiveKey].count += measurement.counts[id];\n      }\n    }\n  }\n\n  // Now make a sorted array with the results.\n  var arr = [];\n  for (inclusiveKey in candidates) {\n    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {\n      arr.push(candidates[inclusiveKey]);\n    }\n  }\n\n  arr.sort(function(a, b) {\n    return b.time - a.time;\n  });\n\n  return arr;\n}\n\nfunction getUnchangedComponents(measurement) {\n  // For a given reconcile, look at which components did not actually\n  // render anything to the DOM and return a mapping of their ID to\n  // the amount of time it took to render the entire subtree.\n  var cleanComponents = {};\n  var dirtyLeafIDs = Object.keys(measurement.writes);\n  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);\n\n  for (var id in allIDs) {\n    var isDirty = false;\n    // For each component that rendered, see if a component that triggered\n    // a DOM op is in its subtree.\n    for (var i = 0; i < dirtyLeafIDs.length; i++) {\n      if (dirtyLeafIDs[i].indexOf(id) === 0) {\n        isDirty = true;\n        break;\n      }\n    }\n    if (!isDirty && measurement.counts[id] > 0) {\n      cleanComponents[id] = true;\n    }\n  }\n  return cleanComponents;\n}\n\nvar ReactDefaultPerfAnalysis = {\n  getExclusiveSummary: getExclusiveSummary,\n  getInclusiveSummary: getInclusiveSummary,\n  getDOMSummary: getDOMSummary,\n  getTotalTime: getTotalTime\n};\n\nmodule.exports = ReactDefaultPerfAnalysis;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}