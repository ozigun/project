{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMTextComponent\n * @typechecks static-only\n */\n'use strict';\n\nvar DOMPropertyOperations = require(\"./DOMPropertyOperations\");\n\nvar ReactComponentBrowserEnvironment = require(\"./ReactComponentBrowserEnvironment\");\n\nvar ReactDOMComponent = require(\"./ReactDOMComponent\");\n\nvar assign = require(\"./Object.assign\");\n\nvar escapeTextContentForBrowser = require(\"./escapeTextContentForBrowser\");\n/**\n * Text nodes violate a couple assumptions that React makes about components:\n *\n *  - When mounting text into the DOM, adjacent text nodes are merged.\n *  - Text nodes cannot be assigned a React root ID.\n *\n * This component is used to wrap strings in elements so that they can undergo\n * the same reconciliation that is applied to elements.\n *\n * TODO: Investigate representing React components in the DOM with text nodes.\n *\n * @class ReactDOMTextComponent\n * @extends ReactComponent\n * @internal\n */\n\n\nvar ReactDOMTextComponent = function (props) {// This constructor and its argument is currently used by mocks.\n};\n\nassign(ReactDOMTextComponent.prototype, {\n  /**\n   * @param {ReactText} text\n   * @internal\n   */\n  construct: function (text) {\n    // TODO: This is really a ReactText (ReactNode), not a ReactElement\n    this._currentElement = text;\n    this._stringText = '' + text; // Properties\n\n    this._rootNodeID = null;\n    this._mountIndex = 0;\n  },\n\n  /**\n   * Creates the markup for this text node. This node is not intended to have\n   * any features besides containing text content.\n   *\n   * @param {string} rootID DOM ID of the root node.\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @return {string} Markup for this text node.\n   * @internal\n   */\n  mountComponent: function (rootID, transaction, context) {\n    this._rootNodeID = rootID;\n    var escapedText = escapeTextContentForBrowser(this._stringText);\n\n    if (transaction.renderToStaticMarkup) {\n      // Normally we'd wrap this in a `span` for the reasons stated above, but\n      // since this is a situation where React won't take over (static pages),\n      // we can simply return the text as it is.\n      return escapedText;\n    }\n\n    return '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' + escapedText + '</span>';\n  },\n\n  /**\n   * Updates this component by updating the text content.\n   *\n   * @param {ReactText} nextText The next text content\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  receiveComponent: function (nextText, transaction) {\n    if (nextText !== this._currentElement) {\n      this._currentElement = nextText;\n      var nextStringText = '' + nextText;\n\n      if (nextStringText !== this._stringText) {\n        // TODO: Save this as pending props and use performUpdateIfNecessary\n        // and/or updateComponent to do the actual update for consistency with\n        // other component types?\n        this._stringText = nextStringText;\n        ReactDOMComponent.BackendIDOperations.updateTextContentByID(this._rootNodeID, nextStringText);\n      }\n    }\n  },\n  unmountComponent: function () {\n    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);\n  }\n});\nmodule.exports = ReactDOMTextComponent;","map":{"version":3,"names":["DOMPropertyOperations","require","ReactComponentBrowserEnvironment","ReactDOMComponent","assign","escapeTextContentForBrowser","ReactDOMTextComponent","props","prototype","construct","text","_currentElement","_stringText","_rootNodeID","_mountIndex","mountComponent","rootID","transaction","context","escapedText","renderToStaticMarkup","createMarkupForID","receiveComponent","nextText","nextStringText","BackendIDOperations","updateTextContentByID","unmountComponent","unmountIDFromEnvironment","module","exports"],"sources":["/Users/ozigun1988/Desktop/git/project/sosyete-frontend/node_modules/react-upvote/node_modules/react/lib/ReactDOMTextComponent.js"],"sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMTextComponent\n * @typechecks static-only\n */\n\n'use strict';\n\nvar DOMPropertyOperations = require(\"./DOMPropertyOperations\");\nvar ReactComponentBrowserEnvironment =\n  require(\"./ReactComponentBrowserEnvironment\");\nvar ReactDOMComponent = require(\"./ReactDOMComponent\");\n\nvar assign = require(\"./Object.assign\");\nvar escapeTextContentForBrowser = require(\"./escapeTextContentForBrowser\");\n\n/**\n * Text nodes violate a couple assumptions that React makes about components:\n *\n *  - When mounting text into the DOM, adjacent text nodes are merged.\n *  - Text nodes cannot be assigned a React root ID.\n *\n * This component is used to wrap strings in elements so that they can undergo\n * the same reconciliation that is applied to elements.\n *\n * TODO: Investigate representing React components in the DOM with text nodes.\n *\n * @class ReactDOMTextComponent\n * @extends ReactComponent\n * @internal\n */\nvar ReactDOMTextComponent = function(props) {\n  // This constructor and its argument is currently used by mocks.\n};\n\nassign(ReactDOMTextComponent.prototype, {\n\n  /**\n   * @param {ReactText} text\n   * @internal\n   */\n  construct: function(text) {\n    // TODO: This is really a ReactText (ReactNode), not a ReactElement\n    this._currentElement = text;\n    this._stringText = '' + text;\n\n    // Properties\n    this._rootNodeID = null;\n    this._mountIndex = 0;\n  },\n\n  /**\n   * Creates the markup for this text node. This node is not intended to have\n   * any features besides containing text content.\n   *\n   * @param {string} rootID DOM ID of the root node.\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @return {string} Markup for this text node.\n   * @internal\n   */\n  mountComponent: function(rootID, transaction, context) {\n    this._rootNodeID = rootID;\n    var escapedText = escapeTextContentForBrowser(this._stringText);\n\n    if (transaction.renderToStaticMarkup) {\n      // Normally we'd wrap this in a `span` for the reasons stated above, but\n      // since this is a situation where React won't take over (static pages),\n      // we can simply return the text as it is.\n      return escapedText;\n    }\n\n    return (\n      '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' +\n        escapedText +\n      '</span>'\n    );\n  },\n\n  /**\n   * Updates this component by updating the text content.\n   *\n   * @param {ReactText} nextText The next text content\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  receiveComponent: function(nextText, transaction) {\n    if (nextText !== this._currentElement) {\n      this._currentElement = nextText;\n      var nextStringText = '' + nextText;\n      if (nextStringText !== this._stringText) {\n        // TODO: Save this as pending props and use performUpdateIfNecessary\n        // and/or updateComponent to do the actual update for consistency with\n        // other component types?\n        this._stringText = nextStringText;\n        ReactDOMComponent.BackendIDOperations.updateTextContentByID(\n          this._rootNodeID,\n          nextStringText\n        );\n      }\n    }\n  },\n\n  unmountComponent: function() {\n    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);\n  }\n\n});\n\nmodule.exports = ReactDOMTextComponent;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,qBAAqB,GAAGC,OAAO,CAAC,yBAAD,CAAnC;;AACA,IAAIC,gCAAgC,GAClCD,OAAO,CAAC,oCAAD,CADT;;AAEA,IAAIE,iBAAiB,GAAGF,OAAO,CAAC,qBAAD,CAA/B;;AAEA,IAAIG,MAAM,GAAGH,OAAO,CAAC,iBAAD,CAApB;;AACA,IAAII,2BAA2B,GAAGJ,OAAO,CAAC,+BAAD,CAAzC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIK,qBAAqB,GAAG,UAASC,KAAT,EAAgB,CAC1C;AACD,CAFD;;AAIAH,MAAM,CAACE,qBAAqB,CAACE,SAAvB,EAAkC;EAEtC;AACF;AACA;AACA;EACEC,SAAS,EAAE,UAASC,IAAT,EAAe;IACxB;IACA,KAAKC,eAAL,GAAuBD,IAAvB;IACA,KAAKE,WAAL,GAAmB,KAAKF,IAAxB,CAHwB,CAKxB;;IACA,KAAKG,WAAL,GAAmB,IAAnB;IACA,KAAKC,WAAL,GAAmB,CAAnB;EACD,CAdqC;;EAgBtC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,cAAc,EAAE,UAASC,MAAT,EAAiBC,WAAjB,EAA8BC,OAA9B,EAAuC;IACrD,KAAKL,WAAL,GAAmBG,MAAnB;IACA,IAAIG,WAAW,GAAGd,2BAA2B,CAAC,KAAKO,WAAN,CAA7C;;IAEA,IAAIK,WAAW,CAACG,oBAAhB,EAAsC;MACpC;MACA;MACA;MACA,OAAOD,WAAP;IACD;;IAED,OACE,WAAWnB,qBAAqB,CAACqB,iBAAtB,CAAwCL,MAAxC,CAAX,GAA6D,GAA7D,GACEG,WADF,GAEA,SAHF;EAKD,CAzCqC;;EA2CtC;AACF;AACA;AACA;AACA;AACA;AACA;EACEG,gBAAgB,EAAE,UAASC,QAAT,EAAmBN,WAAnB,EAAgC;IAChD,IAAIM,QAAQ,KAAK,KAAKZ,eAAtB,EAAuC;MACrC,KAAKA,eAAL,GAAuBY,QAAvB;MACA,IAAIC,cAAc,GAAG,KAAKD,QAA1B;;MACA,IAAIC,cAAc,KAAK,KAAKZ,WAA5B,EAAyC;QACvC;QACA;QACA;QACA,KAAKA,WAAL,GAAmBY,cAAnB;QACArB,iBAAiB,CAACsB,mBAAlB,CAAsCC,qBAAtC,CACE,KAAKb,WADP,EAEEW,cAFF;MAID;IACF;EACF,CAjEqC;EAmEtCG,gBAAgB,EAAE,YAAW;IAC3BzB,gCAAgC,CAAC0B,wBAAjC,CAA0D,KAAKf,WAA/D;EACD;AArEqC,CAAlC,CAAN;AAyEAgB,MAAM,CAACC,OAAP,GAAiBxB,qBAAjB"},"metadata":{},"sourceType":"script"}