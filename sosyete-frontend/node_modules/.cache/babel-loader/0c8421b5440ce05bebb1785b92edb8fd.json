{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactPropTransferer\n */\n'use strict';\n\nvar assign = require(\"./Object.assign\");\n\nvar emptyFunction = require(\"./emptyFunction\");\n\nvar joinClasses = require(\"./joinClasses\");\n/**\n * Creates a transfer strategy that will merge prop values using the supplied\n * `mergeStrategy`. If a prop was previously unset, this just sets it.\n *\n * @param {function} mergeStrategy\n * @return {function}\n */\n\n\nfunction createTransferStrategy(mergeStrategy) {\n  return function (props, key, value) {\n    if (!props.hasOwnProperty(key)) {\n      props[key] = value;\n    } else {\n      props[key] = mergeStrategy(props[key], value);\n    }\n  };\n}\n\nvar transferStrategyMerge = createTransferStrategy(function (a, b) {\n  // `merge` overrides the first object's (`props[key]` above) keys using the\n  // second object's (`value`) keys. An object's style's existing `propA` would\n  // get overridden. Flip the order here.\n  return assign({}, b, a);\n});\n/**\n * Transfer strategies dictate how props are transferred by `transferPropsTo`.\n * NOTE: if you add any more exceptions to this list you should be sure to\n * update `cloneWithProps()` accordingly.\n */\n\nvar TransferStrategies = {\n  /**\n   * Never transfer `children`.\n   */\n  children: emptyFunction,\n\n  /**\n   * Transfer the `className` prop by merging them.\n   */\n  className: createTransferStrategy(joinClasses),\n\n  /**\n   * Transfer the `style` prop (which is an object) by merging them.\n   */\n  style: transferStrategyMerge\n};\n/**\n * Mutates the first argument by transferring the properties from the second\n * argument.\n *\n * @param {object} props\n * @param {object} newProps\n * @return {object}\n */\n\nfunction transferInto(props, newProps) {\n  for (var thisKey in newProps) {\n    if (!newProps.hasOwnProperty(thisKey)) {\n      continue;\n    }\n\n    var transferStrategy = TransferStrategies[thisKey];\n\n    if (transferStrategy && TransferStrategies.hasOwnProperty(thisKey)) {\n      transferStrategy(props, thisKey, newProps[thisKey]);\n    } else if (!props.hasOwnProperty(thisKey)) {\n      props[thisKey] = newProps[thisKey];\n    }\n  }\n\n  return props;\n}\n/**\n * ReactPropTransferer are capable of transferring props to another component\n * using a `transferPropsTo` method.\n *\n * @class ReactPropTransferer\n */\n\n\nvar ReactPropTransferer = {\n  /**\n   * Merge two props objects using TransferStrategies.\n   *\n   * @param {object} oldProps original props (they take precedence)\n   * @param {object} newProps new props to merge in\n   * @return {object} a new object containing both sets of props merged.\n   */\n  mergeProps: function (oldProps, newProps) {\n    return transferInto(assign({}, oldProps), newProps);\n  }\n};\nmodule.exports = ReactPropTransferer;","map":{"version":3,"names":["assign","require","emptyFunction","joinClasses","createTransferStrategy","mergeStrategy","props","key","value","hasOwnProperty","transferStrategyMerge","a","b","TransferStrategies","children","className","style","transferInto","newProps","thisKey","transferStrategy","ReactPropTransferer","mergeProps","oldProps","module","exports"],"sources":["/Users/ozigun1988/Desktop/git/project/sosyete-frontend/node_modules/react-upvote/node_modules/react/lib/ReactPropTransferer.js"],"sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactPropTransferer\n */\n\n'use strict';\n\nvar assign = require(\"./Object.assign\");\nvar emptyFunction = require(\"./emptyFunction\");\nvar joinClasses = require(\"./joinClasses\");\n\n/**\n * Creates a transfer strategy that will merge prop values using the supplied\n * `mergeStrategy`. If a prop was previously unset, this just sets it.\n *\n * @param {function} mergeStrategy\n * @return {function}\n */\nfunction createTransferStrategy(mergeStrategy) {\n  return function(props, key, value) {\n    if (!props.hasOwnProperty(key)) {\n      props[key] = value;\n    } else {\n      props[key] = mergeStrategy(props[key], value);\n    }\n  };\n}\n\nvar transferStrategyMerge = createTransferStrategy(function(a, b) {\n  // `merge` overrides the first object's (`props[key]` above) keys using the\n  // second object's (`value`) keys. An object's style's existing `propA` would\n  // get overridden. Flip the order here.\n  return assign({}, b, a);\n});\n\n/**\n * Transfer strategies dictate how props are transferred by `transferPropsTo`.\n * NOTE: if you add any more exceptions to this list you should be sure to\n * update `cloneWithProps()` accordingly.\n */\nvar TransferStrategies = {\n  /**\n   * Never transfer `children`.\n   */\n  children: emptyFunction,\n  /**\n   * Transfer the `className` prop by merging them.\n   */\n  className: createTransferStrategy(joinClasses),\n  /**\n   * Transfer the `style` prop (which is an object) by merging them.\n   */\n  style: transferStrategyMerge\n};\n\n/**\n * Mutates the first argument by transferring the properties from the second\n * argument.\n *\n * @param {object} props\n * @param {object} newProps\n * @return {object}\n */\nfunction transferInto(props, newProps) {\n  for (var thisKey in newProps) {\n    if (!newProps.hasOwnProperty(thisKey)) {\n      continue;\n    }\n\n    var transferStrategy = TransferStrategies[thisKey];\n\n    if (transferStrategy && TransferStrategies.hasOwnProperty(thisKey)) {\n      transferStrategy(props, thisKey, newProps[thisKey]);\n    } else if (!props.hasOwnProperty(thisKey)) {\n      props[thisKey] = newProps[thisKey];\n    }\n  }\n  return props;\n}\n\n/**\n * ReactPropTransferer are capable of transferring props to another component\n * using a `transferPropsTo` method.\n *\n * @class ReactPropTransferer\n */\nvar ReactPropTransferer = {\n\n  /**\n   * Merge two props objects using TransferStrategies.\n   *\n   * @param {object} oldProps original props (they take precedence)\n   * @param {object} newProps new props to merge in\n   * @return {object} a new object containing both sets of props merged.\n   */\n  mergeProps: function(oldProps, newProps) {\n    return transferInto(assign({}, oldProps), newProps);\n  }\n\n};\n\nmodule.exports = ReactPropTransferer;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,iBAAD,CAApB;;AACA,IAAIC,aAAa,GAAGD,OAAO,CAAC,iBAAD,CAA3B;;AACA,IAAIE,WAAW,GAAGF,OAAO,CAAC,eAAD,CAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,sBAAT,CAAgCC,aAAhC,EAA+C;EAC7C,OAAO,UAASC,KAAT,EAAgBC,GAAhB,EAAqBC,KAArB,EAA4B;IACjC,IAAI,CAACF,KAAK,CAACG,cAAN,CAAqBF,GAArB,CAAL,EAAgC;MAC9BD,KAAK,CAACC,GAAD,CAAL,GAAaC,KAAb;IACD,CAFD,MAEO;MACLF,KAAK,CAACC,GAAD,CAAL,GAAaF,aAAa,CAACC,KAAK,CAACC,GAAD,CAAN,EAAaC,KAAb,CAA1B;IACD;EACF,CAND;AAOD;;AAED,IAAIE,qBAAqB,GAAGN,sBAAsB,CAAC,UAASO,CAAT,EAAYC,CAAZ,EAAe;EAChE;EACA;EACA;EACA,OAAOZ,MAAM,CAAC,EAAD,EAAKY,CAAL,EAAQD,CAAR,CAAb;AACD,CALiD,CAAlD;AAOA;AACA;AACA;AACA;AACA;;AACA,IAAIE,kBAAkB,GAAG;EACvB;AACF;AACA;EACEC,QAAQ,EAAEZ,aAJa;;EAKvB;AACF;AACA;EACEa,SAAS,EAAEX,sBAAsB,CAACD,WAAD,CARV;;EASvB;AACF;AACA;EACEa,KAAK,EAAEN;AAZgB,CAAzB;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASO,YAAT,CAAsBX,KAAtB,EAA6BY,QAA7B,EAAuC;EACrC,KAAK,IAAIC,OAAT,IAAoBD,QAApB,EAA8B;IAC5B,IAAI,CAACA,QAAQ,CAACT,cAAT,CAAwBU,OAAxB,CAAL,EAAuC;MACrC;IACD;;IAED,IAAIC,gBAAgB,GAAGP,kBAAkB,CAACM,OAAD,CAAzC;;IAEA,IAAIC,gBAAgB,IAAIP,kBAAkB,CAACJ,cAAnB,CAAkCU,OAAlC,CAAxB,EAAoE;MAClEC,gBAAgB,CAACd,KAAD,EAAQa,OAAR,EAAiBD,QAAQ,CAACC,OAAD,CAAzB,CAAhB;IACD,CAFD,MAEO,IAAI,CAACb,KAAK,CAACG,cAAN,CAAqBU,OAArB,CAAL,EAAoC;MACzCb,KAAK,CAACa,OAAD,CAAL,GAAiBD,QAAQ,CAACC,OAAD,CAAzB;IACD;EACF;;EACD,OAAOb,KAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIe,mBAAmB,GAAG;EAExB;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,UAAU,EAAE,UAASC,QAAT,EAAmBL,QAAnB,EAA6B;IACvC,OAAOD,YAAY,CAACjB,MAAM,CAAC,EAAD,EAAKuB,QAAL,CAAP,EAAuBL,QAAvB,CAAnB;EACD;AAXuB,CAA1B;AAeAM,MAAM,CAACC,OAAP,GAAiBJ,mBAAjB"},"metadata":{},"sourceType":"script"}