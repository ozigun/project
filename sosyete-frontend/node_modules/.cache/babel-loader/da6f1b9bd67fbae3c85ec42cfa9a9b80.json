{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @typechecks static-only\n * @providesModule cloneWithProps\n */\n'use strict';\n\nvar ReactElement = require(\"./ReactElement\");\n\nvar ReactPropTransferer = require(\"./ReactPropTransferer\");\n\nvar keyOf = require(\"./keyOf\");\n\nvar warning = require(\"./warning\");\n\nvar CHILDREN_PROP = keyOf({\n  children: null\n});\n/**\n * Sometimes you want to change the props of a child passed to you. Usually\n * this is to add a CSS class.\n *\n * @param {ReactElement} child child element you'd like to clone\n * @param {object} props props you'd like to modify. className and style will be\n * merged automatically.\n * @return {ReactElement} a clone of child with props merged in.\n */\n\nfunction cloneWithProps(child, props) {\n  if (\"production\" !== process.env.NODE_ENV) {\n    \"production\" !== process.env.NODE_ENV ? warning(!child.ref, 'You are calling cloneWithProps() on a child with a ref. This is ' + 'dangerous because you\\'re creating a new child which will not be ' + 'added as a ref to its parent.') : null;\n  }\n\n  var newProps = ReactPropTransferer.mergeProps(props, child.props); // Use `child.props.children` if it is provided.\n\n  if (!newProps.hasOwnProperty(CHILDREN_PROP) && child.props.hasOwnProperty(CHILDREN_PROP)) {\n    newProps.children = child.props.children;\n  } // The current API doesn't retain _owner and _context, which is why this\n  // doesn't use ReactElement.cloneAndReplaceProps.\n\n\n  return ReactElement.createElement(child.type, newProps);\n}\n\nmodule.exports = cloneWithProps;","map":{"version":3,"names":["ReactElement","require","ReactPropTransferer","keyOf","warning","CHILDREN_PROP","children","cloneWithProps","child","props","process","env","NODE_ENV","ref","newProps","mergeProps","hasOwnProperty","createElement","type","module","exports"],"sources":["/Users/ozigun1988/Desktop/git/project/sosyete-frontend/node_modules/react-upvote/node_modules/react/lib/cloneWithProps.js"],"sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @typechecks static-only\n * @providesModule cloneWithProps\n */\n\n'use strict';\n\nvar ReactElement = require(\"./ReactElement\");\nvar ReactPropTransferer = require(\"./ReactPropTransferer\");\n\nvar keyOf = require(\"./keyOf\");\nvar warning = require(\"./warning\");\n\nvar CHILDREN_PROP = keyOf({children: null});\n\n/**\n * Sometimes you want to change the props of a child passed to you. Usually\n * this is to add a CSS class.\n *\n * @param {ReactElement} child child element you'd like to clone\n * @param {object} props props you'd like to modify. className and style will be\n * merged automatically.\n * @return {ReactElement} a clone of child with props merged in.\n */\nfunction cloneWithProps(child, props) {\n  if (\"production\" !== process.env.NODE_ENV) {\n    (\"production\" !== process.env.NODE_ENV ? warning(\n      !child.ref,\n      'You are calling cloneWithProps() on a child with a ref. This is ' +\n      'dangerous because you\\'re creating a new child which will not be ' +\n      'added as a ref to its parent.'\n    ) : null);\n  }\n\n  var newProps = ReactPropTransferer.mergeProps(props, child.props);\n\n  // Use `child.props.children` if it is provided.\n  if (!newProps.hasOwnProperty(CHILDREN_PROP) &&\n      child.props.hasOwnProperty(CHILDREN_PROP)) {\n    newProps.children = child.props.children;\n  }\n\n  // The current API doesn't retain _owner and _context, which is why this\n  // doesn't use ReactElement.cloneAndReplaceProps.\n  return ReactElement.createElement(child.type, newProps);\n}\n\nmodule.exports = cloneWithProps;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,gBAAD,CAA1B;;AACA,IAAIC,mBAAmB,GAAGD,OAAO,CAAC,uBAAD,CAAjC;;AAEA,IAAIE,KAAK,GAAGF,OAAO,CAAC,SAAD,CAAnB;;AACA,IAAIG,OAAO,GAAGH,OAAO,CAAC,WAAD,CAArB;;AAEA,IAAII,aAAa,GAAGF,KAAK,CAAC;EAACG,QAAQ,EAAE;AAAX,CAAD,CAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,cAAT,CAAwBC,KAAxB,EAA+BC,KAA/B,EAAsC;EACpC,IAAI,iBAAiBC,OAAO,CAACC,GAAR,CAAYC,QAAjC,EAA2C;IACxC,iBAAiBF,OAAO,CAACC,GAAR,CAAYC,QAA7B,GAAwCR,OAAO,CAC9C,CAACI,KAAK,CAACK,GADuC,EAE9C,qEACA,mEADA,GAEA,+BAJ8C,CAA/C,GAKG,IALJ;EAMD;;EAED,IAAIC,QAAQ,GAAGZ,mBAAmB,CAACa,UAApB,CAA+BN,KAA/B,EAAsCD,KAAK,CAACC,KAA5C,CAAf,CAVoC,CAYpC;;EACA,IAAI,CAACK,QAAQ,CAACE,cAAT,CAAwBX,aAAxB,CAAD,IACAG,KAAK,CAACC,KAAN,CAAYO,cAAZ,CAA2BX,aAA3B,CADJ,EAC+C;IAC7CS,QAAQ,CAACR,QAAT,GAAoBE,KAAK,CAACC,KAAN,CAAYH,QAAhC;EACD,CAhBmC,CAkBpC;EACA;;;EACA,OAAON,YAAY,CAACiB,aAAb,CAA2BT,KAAK,CAACU,IAAjC,EAAuCJ,QAAvC,CAAP;AACD;;AAEDK,MAAM,CAACC,OAAP,GAAiBb,cAAjB"},"metadata":{},"sourceType":"script"}