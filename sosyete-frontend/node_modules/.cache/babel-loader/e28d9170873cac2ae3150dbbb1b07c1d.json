{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SelectEventPlugin\n */\n'use strict';\n\nvar EventConstants = require(\"./EventConstants\");\n\nvar EventPropagators = require(\"./EventPropagators\");\n\nvar ReactInputSelection = require(\"./ReactInputSelection\");\n\nvar SyntheticEvent = require(\"./SyntheticEvent\");\n\nvar getActiveElement = require(\"./getActiveElement\");\n\nvar isTextInputElement = require(\"./isTextInputElement\");\n\nvar keyOf = require(\"./keyOf\");\n\nvar shallowEqual = require(\"./shallowEqual\");\n\nvar topLevelTypes = EventConstants.topLevelTypes;\nvar eventTypes = {\n  select: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onSelect: null\n      }),\n      captured: keyOf({\n        onSelectCapture: null\n      })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topContextMenu, topLevelTypes.topFocus, topLevelTypes.topKeyDown, topLevelTypes.topMouseDown, topLevelTypes.topMouseUp, topLevelTypes.topSelectionChange]\n  }\n};\nvar activeElement = null;\nvar activeElementID = null;\nvar lastSelection = null;\nvar mouseDown = false;\n/**\n * Get an object which is a unique representation of the current selection.\n *\n * The return value will not be consistent across nodes or browsers, but\n * two identical selections on the same node will return identical objects.\n *\n * @param {DOMElement} node\n * @param {object}\n */\n\nfunction getSelection(node) {\n  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {\n    return {\n      start: node.selectionStart,\n      end: node.selectionEnd\n    };\n  } else if (window.getSelection) {\n    var selection = window.getSelection();\n    return {\n      anchorNode: selection.anchorNode,\n      anchorOffset: selection.anchorOffset,\n      focusNode: selection.focusNode,\n      focusOffset: selection.focusOffset\n    };\n  } else if (document.selection) {\n    var range = document.selection.createRange();\n    return {\n      parentElement: range.parentElement(),\n      text: range.text,\n      top: range.boundingTop,\n      left: range.boundingLeft\n    };\n  }\n}\n/**\n * Poll selection to see whether it's changed.\n *\n * @param {object} nativeEvent\n * @return {?SyntheticEvent}\n */\n\n\nfunction constructSelectEvent(nativeEvent) {\n  // Ensure we have the right element, and that the user is not dragging a\n  // selection (this matches native `select` event behavior). In HTML5, select\n  // fires only on input and textarea thus if there's no focused element we\n  // won't dispatch.\n  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {\n    return null;\n  } // Only fire when selection has actually changed.\n\n\n  var currentSelection = getSelection(activeElement);\n\n  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {\n    lastSelection = currentSelection;\n    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementID, nativeEvent);\n    syntheticEvent.type = 'select';\n    syntheticEvent.target = activeElement;\n    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);\n    return syntheticEvent;\n  }\n}\n/**\n * This plugin creates an `onSelect` event that normalizes select events\n * across form elements.\n *\n * Supported elements are:\n * - input (see `isTextInputElement`)\n * - textarea\n * - contentEditable\n *\n * This differs from native browser implementations in the following ways:\n * - Fires on contentEditable fields as well as inputs.\n * - Fires for collapsed selection.\n * - Fires after user input.\n */\n\n\nvar SelectEventPlugin = {\n  eventTypes: eventTypes,\n\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent) {\n    switch (topLevelType) {\n      // Track the input node that has focus.\n      case topLevelTypes.topFocus:\n        if (isTextInputElement(topLevelTarget) || topLevelTarget.contentEditable === 'true') {\n          activeElement = topLevelTarget;\n          activeElementID = topLevelTargetID;\n          lastSelection = null;\n        }\n\n        break;\n\n      case topLevelTypes.topBlur:\n        activeElement = null;\n        activeElementID = null;\n        lastSelection = null;\n        break;\n      // Don't fire the event while the user is dragging. This matches the\n      // semantics of the native select event.\n\n      case topLevelTypes.topMouseDown:\n        mouseDown = true;\n        break;\n\n      case topLevelTypes.topContextMenu:\n      case topLevelTypes.topMouseUp:\n        mouseDown = false;\n        return constructSelectEvent(nativeEvent);\n      // Chrome and IE fire non-standard event when selection is changed (and\n      // sometimes when it hasn't).\n      // Firefox doesn't support selectionchange, so check selection status\n      // after each key entry. The selection changes after keydown and before\n      // keyup, but we check on keydown as well in the case of holding down a\n      // key, when multiple keydown events are fired but only one keyup is.\n\n      case topLevelTypes.topSelectionChange:\n      case topLevelTypes.topKeyDown:\n      case topLevelTypes.topKeyUp:\n        return constructSelectEvent(nativeEvent);\n    }\n  }\n};\nmodule.exports = SelectEventPlugin;","map":{"version":3,"names":["EventConstants","require","EventPropagators","ReactInputSelection","SyntheticEvent","getActiveElement","isTextInputElement","keyOf","shallowEqual","topLevelTypes","eventTypes","select","phasedRegistrationNames","bubbled","onSelect","captured","onSelectCapture","dependencies","topBlur","topContextMenu","topFocus","topKeyDown","topMouseDown","topMouseUp","topSelectionChange","activeElement","activeElementID","lastSelection","mouseDown","getSelection","node","hasSelectionCapabilities","start","selectionStart","end","selectionEnd","window","selection","anchorNode","anchorOffset","focusNode","focusOffset","document","range","createRange","parentElement","text","top","boundingTop","left","boundingLeft","constructSelectEvent","nativeEvent","currentSelection","syntheticEvent","getPooled","type","target","accumulateTwoPhaseDispatches","SelectEventPlugin","extractEvents","topLevelType","topLevelTarget","topLevelTargetID","contentEditable","topKeyUp","module","exports"],"sources":["/Users/ozigun1988/Desktop/git/project/sosyete-frontend/node_modules/react-upvote/node_modules/react/lib/SelectEventPlugin.js"],"sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SelectEventPlugin\n */\n\n'use strict';\n\nvar EventConstants = require(\"./EventConstants\");\nvar EventPropagators = require(\"./EventPropagators\");\nvar ReactInputSelection = require(\"./ReactInputSelection\");\nvar SyntheticEvent = require(\"./SyntheticEvent\");\n\nvar getActiveElement = require(\"./getActiveElement\");\nvar isTextInputElement = require(\"./isTextInputElement\");\nvar keyOf = require(\"./keyOf\");\nvar shallowEqual = require(\"./shallowEqual\");\n\nvar topLevelTypes = EventConstants.topLevelTypes;\n\nvar eventTypes = {\n  select: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onSelect: null}),\n      captured: keyOf({onSelectCapture: null})\n    },\n    dependencies: [\n      topLevelTypes.topBlur,\n      topLevelTypes.topContextMenu,\n      topLevelTypes.topFocus,\n      topLevelTypes.topKeyDown,\n      topLevelTypes.topMouseDown,\n      topLevelTypes.topMouseUp,\n      topLevelTypes.topSelectionChange\n    ]\n  }\n};\n\nvar activeElement = null;\nvar activeElementID = null;\nvar lastSelection = null;\nvar mouseDown = false;\n\n/**\n * Get an object which is a unique representation of the current selection.\n *\n * The return value will not be consistent across nodes or browsers, but\n * two identical selections on the same node will return identical objects.\n *\n * @param {DOMElement} node\n * @param {object}\n */\nfunction getSelection(node) {\n  if ('selectionStart' in node &&\n      ReactInputSelection.hasSelectionCapabilities(node)) {\n    return {\n      start: node.selectionStart,\n      end: node.selectionEnd\n    };\n  } else if (window.getSelection) {\n    var selection = window.getSelection();\n    return {\n      anchorNode: selection.anchorNode,\n      anchorOffset: selection.anchorOffset,\n      focusNode: selection.focusNode,\n      focusOffset: selection.focusOffset\n    };\n  } else if (document.selection) {\n    var range = document.selection.createRange();\n    return {\n      parentElement: range.parentElement(),\n      text: range.text,\n      top: range.boundingTop,\n      left: range.boundingLeft\n    };\n  }\n}\n\n/**\n * Poll selection to see whether it's changed.\n *\n * @param {object} nativeEvent\n * @return {?SyntheticEvent}\n */\nfunction constructSelectEvent(nativeEvent) {\n  // Ensure we have the right element, and that the user is not dragging a\n  // selection (this matches native `select` event behavior). In HTML5, select\n  // fires only on input and textarea thus if there's no focused element we\n  // won't dispatch.\n  if (mouseDown ||\n      activeElement == null ||\n      activeElement !== getActiveElement()) {\n    return null;\n  }\n\n  // Only fire when selection has actually changed.\n  var currentSelection = getSelection(activeElement);\n  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {\n    lastSelection = currentSelection;\n\n    var syntheticEvent = SyntheticEvent.getPooled(\n      eventTypes.select,\n      activeElementID,\n      nativeEvent\n    );\n\n    syntheticEvent.type = 'select';\n    syntheticEvent.target = activeElement;\n\n    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);\n\n    return syntheticEvent;\n  }\n}\n\n/**\n * This plugin creates an `onSelect` event that normalizes select events\n * across form elements.\n *\n * Supported elements are:\n * - input (see `isTextInputElement`)\n * - textarea\n * - contentEditable\n *\n * This differs from native browser implementations in the following ways:\n * - Fires on contentEditable fields as well as inputs.\n * - Fires for collapsed selection.\n * - Fires after user input.\n */\nvar SelectEventPlugin = {\n\n  eventTypes: eventTypes,\n\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function(\n      topLevelType,\n      topLevelTarget,\n      topLevelTargetID,\n      nativeEvent) {\n\n    switch (topLevelType) {\n      // Track the input node that has focus.\n      case topLevelTypes.topFocus:\n        if (isTextInputElement(topLevelTarget) ||\n            topLevelTarget.contentEditable === 'true') {\n          activeElement = topLevelTarget;\n          activeElementID = topLevelTargetID;\n          lastSelection = null;\n        }\n        break;\n      case topLevelTypes.topBlur:\n        activeElement = null;\n        activeElementID = null;\n        lastSelection = null;\n        break;\n\n      // Don't fire the event while the user is dragging. This matches the\n      // semantics of the native select event.\n      case topLevelTypes.topMouseDown:\n        mouseDown = true;\n        break;\n      case topLevelTypes.topContextMenu:\n      case topLevelTypes.topMouseUp:\n        mouseDown = false;\n        return constructSelectEvent(nativeEvent);\n\n      // Chrome and IE fire non-standard event when selection is changed (and\n      // sometimes when it hasn't).\n      // Firefox doesn't support selectionchange, so check selection status\n      // after each key entry. The selection changes after keydown and before\n      // keyup, but we check on keydown as well in the case of holding down a\n      // key, when multiple keydown events are fired but only one keyup is.\n      case topLevelTypes.topSelectionChange:\n      case topLevelTypes.topKeyDown:\n      case topLevelTypes.topKeyUp:\n        return constructSelectEvent(nativeEvent);\n    }\n  }\n};\n\nmodule.exports = SelectEventPlugin;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,cAAc,GAAGC,OAAO,CAAC,kBAAD,CAA5B;;AACA,IAAIC,gBAAgB,GAAGD,OAAO,CAAC,oBAAD,CAA9B;;AACA,IAAIE,mBAAmB,GAAGF,OAAO,CAAC,uBAAD,CAAjC;;AACA,IAAIG,cAAc,GAAGH,OAAO,CAAC,kBAAD,CAA5B;;AAEA,IAAII,gBAAgB,GAAGJ,OAAO,CAAC,oBAAD,CAA9B;;AACA,IAAIK,kBAAkB,GAAGL,OAAO,CAAC,sBAAD,CAAhC;;AACA,IAAIM,KAAK,GAAGN,OAAO,CAAC,SAAD,CAAnB;;AACA,IAAIO,YAAY,GAAGP,OAAO,CAAC,gBAAD,CAA1B;;AAEA,IAAIQ,aAAa,GAAGT,cAAc,CAACS,aAAnC;AAEA,IAAIC,UAAU,GAAG;EACfC,MAAM,EAAE;IACNC,uBAAuB,EAAE;MACvBC,OAAO,EAAEN,KAAK,CAAC;QAACO,QAAQ,EAAE;MAAX,CAAD,CADS;MAEvBC,QAAQ,EAAER,KAAK,CAAC;QAACS,eAAe,EAAE;MAAlB,CAAD;IAFQ,CADnB;IAKNC,YAAY,EAAE,CACZR,aAAa,CAACS,OADF,EAEZT,aAAa,CAACU,cAFF,EAGZV,aAAa,CAACW,QAHF,EAIZX,aAAa,CAACY,UAJF,EAKZZ,aAAa,CAACa,YALF,EAMZb,aAAa,CAACc,UANF,EAOZd,aAAa,CAACe,kBAPF;EALR;AADO,CAAjB;AAkBA,IAAIC,aAAa,GAAG,IAApB;AACA,IAAIC,eAAe,GAAG,IAAtB;AACA,IAAIC,aAAa,GAAG,IAApB;AACA,IAAIC,SAAS,GAAG,KAAhB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,YAAT,CAAsBC,IAAtB,EAA4B;EAC1B,IAAI,oBAAoBA,IAApB,IACA3B,mBAAmB,CAAC4B,wBAApB,CAA6CD,IAA7C,CADJ,EACwD;IACtD,OAAO;MACLE,KAAK,EAAEF,IAAI,CAACG,cADP;MAELC,GAAG,EAAEJ,IAAI,CAACK;IAFL,CAAP;EAID,CAND,MAMO,IAAIC,MAAM,CAACP,YAAX,EAAyB;IAC9B,IAAIQ,SAAS,GAAGD,MAAM,CAACP,YAAP,EAAhB;IACA,OAAO;MACLS,UAAU,EAAED,SAAS,CAACC,UADjB;MAELC,YAAY,EAAEF,SAAS,CAACE,YAFnB;MAGLC,SAAS,EAAEH,SAAS,CAACG,SAHhB;MAILC,WAAW,EAAEJ,SAAS,CAACI;IAJlB,CAAP;EAMD,CARM,MAQA,IAAIC,QAAQ,CAACL,SAAb,EAAwB;IAC7B,IAAIM,KAAK,GAAGD,QAAQ,CAACL,SAAT,CAAmBO,WAAnB,EAAZ;IACA,OAAO;MACLC,aAAa,EAAEF,KAAK,CAACE,aAAN,EADV;MAELC,IAAI,EAAEH,KAAK,CAACG,IAFP;MAGLC,GAAG,EAAEJ,KAAK,CAACK,WAHN;MAILC,IAAI,EAAEN,KAAK,CAACO;IAJP,CAAP;EAMD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,oBAAT,CAA8BC,WAA9B,EAA2C;EACzC;EACA;EACA;EACA;EACA,IAAIxB,SAAS,IACTH,aAAa,IAAI,IADjB,IAEAA,aAAa,KAAKpB,gBAAgB,EAFtC,EAE0C;IACxC,OAAO,IAAP;EACD,CATwC,CAWzC;;;EACA,IAAIgD,gBAAgB,GAAGxB,YAAY,CAACJ,aAAD,CAAnC;;EACA,IAAI,CAACE,aAAD,IAAkB,CAACnB,YAAY,CAACmB,aAAD,EAAgB0B,gBAAhB,CAAnC,EAAsE;IACpE1B,aAAa,GAAG0B,gBAAhB;IAEA,IAAIC,cAAc,GAAGlD,cAAc,CAACmD,SAAf,CACnB7C,UAAU,CAACC,MADQ,EAEnBe,eAFmB,EAGnB0B,WAHmB,CAArB;IAMAE,cAAc,CAACE,IAAf,GAAsB,QAAtB;IACAF,cAAc,CAACG,MAAf,GAAwBhC,aAAxB;IAEAvB,gBAAgB,CAACwD,4BAAjB,CAA8CJ,cAA9C;IAEA,OAAOA,cAAP;EACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIK,iBAAiB,GAAG;EAEtBjD,UAAU,EAAEA,UAFU;;EAItB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEkD,aAAa,EAAE,UACXC,YADW,EAEXC,cAFW,EAGXC,gBAHW,EAIXX,WAJW,EAIE;IAEf,QAAQS,YAAR;MACE;MACA,KAAKpD,aAAa,CAACW,QAAnB;QACE,IAAId,kBAAkB,CAACwD,cAAD,CAAlB,IACAA,cAAc,CAACE,eAAf,KAAmC,MADvC,EAC+C;UAC7CvC,aAAa,GAAGqC,cAAhB;UACApC,eAAe,GAAGqC,gBAAlB;UACApC,aAAa,GAAG,IAAhB;QACD;;QACD;;MACF,KAAKlB,aAAa,CAACS,OAAnB;QACEO,aAAa,GAAG,IAAhB;QACAC,eAAe,GAAG,IAAlB;QACAC,aAAa,GAAG,IAAhB;QACA;MAEF;MACA;;MACA,KAAKlB,aAAa,CAACa,YAAnB;QACEM,SAAS,GAAG,IAAZ;QACA;;MACF,KAAKnB,aAAa,CAACU,cAAnB;MACA,KAAKV,aAAa,CAACc,UAAnB;QACEK,SAAS,GAAG,KAAZ;QACA,OAAOuB,oBAAoB,CAACC,WAAD,CAA3B;MAEF;MACA;MACA;MACA;MACA;MACA;;MACA,KAAK3C,aAAa,CAACe,kBAAnB;MACA,KAAKf,aAAa,CAACY,UAAnB;MACA,KAAKZ,aAAa,CAACwD,QAAnB;QACE,OAAOd,oBAAoB,CAACC,WAAD,CAA3B;IAnCJ;EAqCD;AAvDqB,CAAxB;AA0DAc,MAAM,CAACC,OAAP,GAAiBR,iBAAjB"},"metadata":{},"sourceType":"script"}