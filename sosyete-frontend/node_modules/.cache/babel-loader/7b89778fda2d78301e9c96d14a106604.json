{"ast":null,"code":"/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule warning\n */\n\"use strict\";\n\nvar emptyFunction = require(\"./emptyFunction\");\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\n\nvar warning = emptyFunction;\n\nif (\"production\" !== process.env.NODE_ENV) {\n  warning = function (condition, format) {\n    for (var args = [], $__0 = 2, $__1 = arguments.length; $__0 < $__1; $__0++) args.push(arguments[$__0]);\n\n    if (format === undefined) {\n      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');\n    }\n\n    if (format.length < 10 || /^[s\\W]*$/.test(format)) {\n      throw new Error('The warning format should be able to uniquely identify this ' + 'warning. Please, use a more descriptive format than: ' + format);\n    }\n\n    if (format.indexOf('Failed Composite propType: ') === 0) {\n      return; // Ignore CompositeComponent proptype check.\n    }\n\n    if (!condition) {\n      var argIndex = 0;\n      var message = 'Warning: ' + format.replace(/%s/g, function () {\n        return args[argIndex++];\n      });\n      console.warn(message);\n\n      try {\n        // --- Welcome to debugging React ---\n        // This error was thrown as a convenience so that you can use this stack\n        // to find the callsite that caused this warning to fire.\n        throw new Error(message);\n      } catch (x) {}\n    }\n  };\n}\n\nmodule.exports = warning;","map":{"version":3,"names":["emptyFunction","require","warning","process","env","NODE_ENV","condition","format","args","$__0","$__1","arguments","length","push","undefined","Error","test","indexOf","argIndex","message","replace","console","warn","x","module","exports"],"sources":["/Users/ozigun1988/Desktop/git/project/sosyete-frontend/node_modules/react-upvote/node_modules/react/lib/warning.js"],"sourcesContent":["/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule warning\n */\n\n\"use strict\";\n\nvar emptyFunction = require(\"./emptyFunction\");\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar warning = emptyFunction;\n\nif (\"production\" !== process.env.NODE_ENV) {\n  warning = function(condition, format ) {for (var args=[],$__0=2,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);\n    if (format === undefined) {\n      throw new Error(\n        '`warning(condition, format, ...args)` requires a warning ' +\n        'message argument'\n      );\n    }\n\n    if (format.length < 10 || /^[s\\W]*$/.test(format)) {\n      throw new Error(\n        'The warning format should be able to uniquely identify this ' +\n        'warning. Please, use a more descriptive format than: ' + format\n      );\n    }\n\n    if (format.indexOf('Failed Composite propType: ') === 0) {\n      return; // Ignore CompositeComponent proptype check.\n    }\n\n    if (!condition) {\n      var argIndex = 0;\n      var message = 'Warning: ' + format.replace(/%s/g, function()  {return args[argIndex++];});\n      console.warn(message);\n      try {\n        // --- Welcome to debugging React ---\n        // This error was thrown as a convenience so that you can use this stack\n        // to find the callsite that caused this warning to fire.\n        throw new Error(message);\n      } catch(x) {}\n    }\n  };\n}\n\nmodule.exports = warning;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,aAAa,GAAGC,OAAO,CAAC,iBAAD,CAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEA,IAAIC,OAAO,GAAGF,aAAd;;AAEA,IAAI,iBAAiBG,OAAO,CAACC,GAAR,CAAYC,QAAjC,EAA2C;EACzCH,OAAO,GAAG,UAASI,SAAT,EAAoBC,MAApB,EAA6B;IAAC,KAAK,IAAIC,IAAI,GAAC,EAAT,EAAYC,IAAI,GAAC,CAAjB,EAAmBC,IAAI,GAACC,SAAS,CAACC,MAAvC,EAA8CH,IAAI,GAACC,IAAnD,EAAwDD,IAAI,EAA5D,EAAgED,IAAI,CAACK,IAAL,CAAUF,SAAS,CAACF,IAAD,CAAnB;;IACtG,IAAIF,MAAM,KAAKO,SAAf,EAA0B;MACxB,MAAM,IAAIC,KAAJ,CACJ,8DACA,kBAFI,CAAN;IAID;;IAED,IAAIR,MAAM,CAACK,MAAP,GAAgB,EAAhB,IAAsB,WAAWI,IAAX,CAAgBT,MAAhB,CAA1B,EAAmD;MACjD,MAAM,IAAIQ,KAAJ,CACJ,iEACA,uDADA,GAC0DR,MAFtD,CAAN;IAID;;IAED,IAAIA,MAAM,CAACU,OAAP,CAAe,6BAAf,MAAkD,CAAtD,EAAyD;MACvD,OADuD,CAC/C;IACT;;IAED,IAAI,CAACX,SAAL,EAAgB;MACd,IAAIY,QAAQ,GAAG,CAAf;MACA,IAAIC,OAAO,GAAG,cAAcZ,MAAM,CAACa,OAAP,CAAe,KAAf,EAAsB,YAAY;QAAC,OAAOZ,IAAI,CAACU,QAAQ,EAAT,CAAX;MAAyB,CAA5D,CAA5B;MACAG,OAAO,CAACC,IAAR,CAAaH,OAAb;;MACA,IAAI;QACF;QACA;QACA;QACA,MAAM,IAAIJ,KAAJ,CAAUI,OAAV,CAAN;MACD,CALD,CAKE,OAAMI,CAAN,EAAS,CAAE;IACd;EACF,CA9BD;AA+BD;;AAEDC,MAAM,CAACC,OAAP,GAAiBvB,OAAjB"},"metadata":{},"sourceType":"script"}